
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd('/Users/dpadil10/Dropbox (ASU)/BIO598-Evo-cell/project/data_analysis/presentation/manuscript_growth-and-size-prokaryotes/data_analysis/')
> library(ape)
> library(geiger)
Loading required package: phytools
Loading required package: maps
> library(phytools)
> library(phylolm)
> library(lattice)
> library(nlme)
> library(raster)
Loading required package: sp

Attaching package: ‘raster’

The following object is masked from ‘package:nlme’:

    getData

The following object is masked from ‘package:geiger’:

    hdr

> library(scales)

Attaching package: ‘scales’

The following object is masked from ‘package:phytools’:

    rescale

> library(vioplot)
Loading required package: sm
Package 'sm', version 2.2-5.7: type help(sm) for summary information
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> tree <- read.tree("spp.tree.nwk")
> data <- read.csv("/condensed_traits_NCBI.csv")
Error in file(file, "rt") : cannot open the connection
In addition: Warning message:
In file(file, "rt") :
  cannot open file '/condensed_traits_NCBI.csv': No such file or directory
> data <- read.csv("condensed_traits_NCBI.csv")
> vol <- read.csv("cell_volume.csv")
> str(vol)
'data.frame':	52 obs. of  3 variables:
 $ species  : chr  "Arthrobacter sp. FB24" "Bacillus subtilis" "Bdellovibrio bacteriovorus" "Clostridium cellulolyticum" ...
 $ volume   : num  0.502 0.9 0.098 0.159 1.145 ...
 $ reference: chr  "https://genome.jgi.doe.gov/portal/art_f/art_f.home.html; Lynch et al., 2022. Evolutionary scaling of maximum gr"| __truncated__ "Jeong et al. (1990, Biotech. Bioeng.), Page 80." "Stolp and Starr (1963, Ant. Von Leeuwenhoek); Gadkari and Stolp (1976, Arch. Microbiol.)" "Desvaux et al. (2001, J. Bacteriol.)" ...
> head(vol)
                     species volume
1      Arthrobacter sp. FB24 0.5025
2          Bacillus subtilis 0.9000
3 Bdellovibrio bacteriovorus 0.0980
4 Clostridium cellulolyticum 0.1590
5         Clostridium tetani 1.1454
6        Cupriavidus necator 2.5080
                                                                                                                                    reference
1 https://genome.jgi.doe.gov/portal/art_f/art_f.home.html; Lynch et al., 2022. Evolutionary scaling of maximum growth rate with organism size
2                                                                                             Jeong et al. (1990, Biotech. Bioeng.), Page 80.
3                                                    Stolp and Starr (1963, Ant. Von Leeuwenhoek); Gadkari and Stolp (1976, Arch. Microbiol.)
4                                                                                                        Desvaux et al. (2001, J. Bacteriol.)
5                                                                                   Brenet and Winet (1977, Ann. Rev. Fluid Mech.), Table 1. 
6                                                                            Pedros-Alio et al. (1985, Arch. Microbiol.), Abstract, Page 181.
> spp.d1_lo <- data[!is.na(data$d1_lo), ]
> spp.d1_up <- data[!is.na(data$d1_up), ]
> spp.doubling <- data[!is.na(data$doubling_h), ]
> spp.rRNA <- data[!is.na(data$rRNA16S_genes), ]
> spp.tRNA <- data[!is.na(data$tRNA_genes), ]
> 
> 
> tRNA <- aggregate(spp.tRNA$tRNA_genes, by = list(spp.tRNA$species), mean, na.action = na.rm)
> rRNA <- aggregate(spp.rRNA$rRNA16S_genes, by = list(spp.rRNA$species), mean, na.action = na.rm)
> d1_up <- aggregate(spp.d1_up$d1_up, by = list(spp.d1_up$species), mean, na.action = na.rm)
> d1_lo <- aggregate(spp.d1_lo$d1_lo, by = list(spp.d1_lo$species), mean, na.action = na.rm)
> doubling <- aggregate(spp.doubling$doubling_h, by = list(spp.doubling$species), mean, na.action = na.rm)
> cell.vol <- aggregate(vol$volume, by = list(vol$species), mean)
> str(cell.vol)
'data.frame':	48 obs. of  2 variables:
 $ Group.1: chr  "Aeropyrum pernix" "Anabaena cylindrica" "Arthrobacter sp. FB24" "Azotobacter chroococcum" ...
 $ x      : num  0.4 316 0.502 187 5.3 ...
> 
> 
> 
> dim(tRNA)
[1] 3543    2
> names(tRNA) <- c("species", "tRNA")
> dim(rRNA)
[1] 3115    2
> names(rRNA) <- c("species", "rRNA")
> dim(d1_up)
[1] 1603    2
> names(d1_up) <- c("species", "d1_up")
> dim(d1_lo)
[1] 4053    2
> names(d1_lo) <- c("species", "d1_lo")
> dim(doubling)
[1] 928   2
> names(doubling) <- c("species", "doubling_h")
> dim(cell.vol)
[1] 48  2
> names(cell.vol) <- c("species", "volume")
> doubling <- aggregate(spp.doubling$doubling_h, by = list(spp.doubling$species), mean, na.action = na.rm)
> cell.vol <- aggregate(vol$volume, by = list(vol$species), mean)
> str(cell.vol)
'data.frame':	48 obs. of  2 variables:
 $ Group.1: chr  "Aeropyrum pernix" "Anabaena cylindrica" "Arthrobacter sp. FB24" "Azotobacter chroococcum" ...
 $ x      : num  0.4 316 0.502 187 5.3 ...
> 
> dim(doubling)
[1] 928   2
> names(doubling) <- c("species", "doubling_h")
> dim(cell.vol)
[1] 48  2
> names(cell.vol) <- c("species", "volume")
> 
> 
> obj <- rep()
> for(i in cell.vol$species){
+     kingdom <- data$superkingdom[data$species == i][1]
+     obj <- c(obj, kingdom)
+ }
> 
> cell.vol$kingdom <- obj
> cell.vol$kingdom[11] <- "Bacteria"
> 
> doubling$species <- gsub("[[:punct:]]", "", doubling$species)
> doubling$species <- gsub(" ", "_", doubling$species)
> cell.vol$species <- gsub(" ", "_", cell.vol$species)
> 
> v.dat <- merge(cell.vol, doubling, by = "species")
> v.dat <- v.dat[!v.dat$species == "Sphingopyxis_alaskensis", ] ## possible outlier
> v.dat <- v.dat[!v.dat$species == "Anabaena_cylindrica", ] ## possible outlier
> v.dat <- v.dat[!v.dat$species == "Haloferax_volcanii", ] ## possible outlier
> v.dat <- v.dat[!v.dat$species == "Azotobacter_chroococcum", ] ## possible outlier
> rownames(v.dat) <- v.dat$species
> 
> vol.tree <- read.tree("vol.spp.nwk")
> vol.tree <- force.ultrametric(vol.tree)
***************************************************************
*                          Note:                              *
*    force.ultrametric does not include a formal method to    *
*    ultrametricize a tree & should only be used to coerce    *
*   a phylogeny that fails is.ultrametric due to rounding --  *
*    not as a substitute for formal rate-smoothing methods.   *
***************************************************************
> 
> check <- name.check(vol.tree, v.dat)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.vol <- drop.tip(vol.tree, rm_phy)
> 
> vol.dat <- subset(v.dat, subset = v.dat$species %in% tree.vol$tip, select = names(v.dat))
> name.check(tree.vol, vol.dat)
[1] "OK"
> str(vol.dat)
'data.frame':	29 obs. of  4 variables:
 $ species   : chr  "Aeropyrum_pernix" "Bacillus_subtilis" "Bdellovibrio_bacteriovorus" "Caulobacter_vibrioides" ...
 $ volume    : num  0.4 0.9 0.134 0.66 0.48 2.7 0.717 1 1.2 1.15 ...
 $ kingdom   : chr  "Archaea" "Bacteria" "Bacteria" "Bacteria" ...
 $ doubling_h: num  3.54 0.431 1.4 1.42 1.548 ...
> col.br <- setNames(c("purple", "orange"), c("Archaea", "Bacteria"))
> 
> plotTree(tree.vol, ftype = "i", lwd = 3, mar = c(3.5, 1, 1, 3))
> 
> par(new = TRUE, col = "transparent")
> 
> painted <- paintSubTree(tree.vol, 52, "Archaea" ,"0")
> plotSimmap(painted, col.br, ftype = "i", lwd = 3, mar = c(3.5, 1, 1, 3))
> 
> par(new = TRUE, col = "transparent")
> 
> painted <- paintSubTree(tree.vol, 31, "Bacteria")
> 
> plotSimmap(painted, col.br, ftype = "i", lwd = 3, mar = c(3.5, 1, 1, 3))
> 
> par(new = TRUE, col = "black")
> 
> legend("bottomleft", legend = c("Archaea", "Bacteria"), lwd = 3, col = col.br, bty = "n")
> 
> axisPhylo(1, line = -0.1)
> mtext("Time (mya)", side = 1, line = 2, at = 2000)
> 
> 
> obj <- get("last_plot.phylo", envir = .PlotPhyloEnv)
> x2 <- runif(100, obj$x.lim[2] + 10, obj$x.lim[2] + 50)
> spp <- gsub("(_).*","", tree.vol$tip.label)[-c(3, 6, 9, 10, 12, 14, 16, 18, 21, 24, 28)]
> spp[7] <- "Cyanobacteria"
> spp[8] <- "Mycoplasma_genitalium"
> spp[10] <- "Pleurocapsa fuliginosa"
> 
> 
> col.fill <- c(rep("orange", 13), rep("purple", 7))
> col.bor <- c(rep("black", 13), rep("red", 7))
> idx <- 1
> for(i in spp){
+     x2
+     uuid <- get_uuid(name = i, n = 1)
+     img <- get_phylopic(uuid = uuid)
+     nodes <- sapply(i, grep, x = tree.vol$tip.label)
+     for(j in nodes){
+         add_phylopic_base(img = img, x = sample(x2, 1), y = j, ysize = 1, color = col.bor[idx], fill = col.fill[idx])
+ 
+     }
+     idx = idx + 1
+ }
Error in get_uuid(name = i, n = 1) : could not find function "get_uuid"
> 
> uuid <- get_uuid(name = "Chroococcus turgidus", n = 1)
Error in get_uuid(name = "Chroococcus turgidus", n = 1) : 
  could not find function "get_uuid"
> img <- get_phylopic(uuid = uuid)
Error in get_phylopic(uuid = uuid) : 
  could not find function "get_phylopic"
> add_phylopic_base(img = img, x = 7400, y = 10, ysize = 1, color = "black", fill = "orange")
Error in add_phylopic_base(img = img, x = 7400, y = 10, ysize = 1, color = "black",  : 
  could not find function "add_phylopic_base"
> 
> uuid <- get_uuid(name = "Pleurocapsa fuliginosa", n = 1)
Error in get_uuid(name = "Pleurocapsa fuliginosa", n = 1) : 
  could not find function "get_uuid"
> img <- get_phylopic(uuid = uuid)
Error in get_phylopic(uuid = uuid) : 
  could not find function "get_phylopic"
> add_phylopic_base(img = img, x = 7400, y = 17, ysize = 1, color = "black", fill = "orange")
Error in add_phylopic_base(img = img, x = 7400, y = 17, ysize = 1, color = "black",  : 
  could not find function "add_phylopic_base"
> 
> 
> uuid <- get_uuid(name = "Fimbriimonas ginsengisoli", n = 1)
Error in get_uuid(name = "Fimbriimonas ginsengisoli", n = 1) : 
  could not find function "get_uuid"
> img <- get_phylopic(uuid = uuid)
Error in get_phylopic(uuid = uuid) : 
  could not find function "get_phylopic"
> add_phylopic_base(img = img, x = 7400, y = 11, ysize = 1, color = "green", fill = "orange")
Error in add_phylopic_base(img = img, x = 7400, y = 11, ysize = 1, color = "green",  : 
  could not find function "add_phylopic_base"
> R.session
Error: object 'R.session' not found
> R.session()
Error in R.session() : could not find function "R.session"
> sessionInfo()
R version 4.3.2 (2023-10-31)
Platform: x86_64-apple-darwin20 (64-bit)
Running under: macOS Sonoma 14.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: America/Phoenix
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] vioplot_0.4.0  zoo_1.8-12     sm_2.2-5.7.1   scales_1.3.0   raster_3.6-26 
 [6] sp_2.1-3       nlme_3.1-164   lattice_0.21-9 phylolm_2.6.2  geiger_2.0.11 
[11] phytools_2.1-1 maps_3.4.2     ape_5.7-1     

loaded via a namespace (and not attached):
 [1] future_1.33.1           generics_0.1.3          listenv_0.9.0          
 [4] digest_0.6.34           magrittr_2.0.3          grid_4.3.2             
 [7] iterators_1.0.14        mvtnorm_1.2-4           foreach_1.5.2          
[10] doParallel_1.0.17       Matrix_1.6-1.1          deSolve_1.40           
[13] optimParallel_1.0-2     combinat_0.0-8          subplex_1.8            
[16] codetools_0.2-19        numDeriv_2016.8-1.1     mnormt_2.1.1           
[19] cli_3.6.2               rlang_1.1.3             expm_0.999-9           
[22] scatterplot3d_0.3-44    parallelly_1.36.0       future.apply_1.11.1    
[25] munsell_0.5.0           tools_4.3.2             parallel_4.3.2         
[28] coda_0.19-4             colorspace_2.1-0        fastmatch_1.1-4        
[31] globals_0.16.2          R6_2.5.1                lifecycle_1.0.4        
[34] MASS_7.3-60             pkgconfig_2.0.3         terra_1.7-71           
[37] glue_1.7.0              phangorn_2.11.1         Rcpp_1.0.12            
[40] clusterGeneration_1.3.8 igraph_1.6.0            compiler_4.3.2         
[43] quadprog_1.5-8         
> library(rphylopic)
You are using rphylopic v.1.3.0. Please remember to credit PhyloPic contributors (hint: `get_attribution()`) and cite rphylopic in your work (hint: `citation("rphylopic")`).
> col.br <- setNames(c("purple", "orange"), c("Archaea", "Bacteria"))
> 
> plotTree(tree.vol, ftype = "i", lwd = 3, mar = c(3.5, 1, 1, 3))
> 
> par(new = TRUE, col = "transparent")
> 
> painted <- paintSubTree(tree.vol, 52, "Archaea" ,"0")
> plotSimmap(painted, col.br, ftype = "i", lwd = 3, mar = c(3.5, 1, 1, 3))
> 
> par(new = TRUE, col = "transparent")
> 
> painted <- paintSubTree(tree.vol, 31, "Bacteria")
> 
> plotSimmap(painted, col.br, ftype = "i", lwd = 3, mar = c(3.5, 1, 1, 3))
> 
> par(new = TRUE, col = "black")
> 
> legend("bottomleft", legend = c("Archaea", "Bacteria"), lwd = 3, col = col.br, bty = "n")
> 
> axisPhylo(1, line = -0.1)
> mtext("Time (mya)", side = 1, line = 2, at = 2000)
> 
> 
> obj <- get("last_plot.phylo", envir = .PlotPhyloEnv)
> x2 <- runif(100, obj$x.lim[2] + 10, obj$x.lim[2] + 50)
> spp <- gsub("(_).*","", tree.vol$tip.label)[-c(3, 6, 9, 10, 12, 14, 16, 18, 21, 24, 28)]
> spp[7] <- "Cyanobacteria"
> spp[8] <- "Mycoplasma_genitalium"
> spp[10] <- "Pleurocapsa fuliginosa"
> 
> 
> col.fill <- c(rep("orange", 13), rep("purple", 7))
> col.bor <- c(rep("black", 13), rep("red", 7))
> idx <- 1
> for(i in spp){
+     x2
+     uuid <- get_uuid(name = i, n = 1)
+     img <- get_phylopic(uuid = uuid)
+     nodes <- sapply(i, grep, x = tree.vol$tip.label)
+     for(j in nodes){
+         add_phylopic_base(img = img, x = sample(x2, 1), y = j, ysize = 1, color = col.bor[idx], fill = col.fill[idx])
+ 
+     }
+     idx = idx + 1
+ }
> 
> uuid <- get_uuid(name = "Chroococcus turgidus", n = 1)
> img <- get_phylopic(uuid = uuid)
> add_phylopic_base(img = img, x = 7400, y = 10, ysize = 1, color = "black", fill = "orange")
> 
> uuid <- get_uuid(name = "Pleurocapsa fuliginosa", n = 1)
> img <- get_phylopic(uuid = uuid)
> add_phylopic_base(img = img, x = 7400, y = 17, ysize = 1, color = "black", fill = "orange")
> 
> 
> uuid <- get_uuid(name = "Fimbriimonas ginsengisoli", n = 1)
> img <- get_phylopic(uuid = uuid)
> add_phylopic_base(img = img, x = 7400, y = 11, ysize = 1, color = "green", fill = "orange")
> mod <- lm(log10(doubling_h) ~ log10(volume), data = v.dat)
> 
> 
> pg.mod <- gls(log10(doubling_h) ~ log10(volume), correlation = corBrownian(phy = tree.vol, form = ~species), data = vol.dat, method = "ML")
> 
> 
> #png("figure1.png", height = 7, width = 7, units = "in", res = 360)
> 
> ## IC
> 
> SSX <- sum(round((log10(vol.dat$volume) - mean(log10(vol.dat$volume)))^2), 2)
> s2 <- var(log10(vol.dat$doubling_h))
> n <- length(vol.dat$doubling_h)
> x <- seq(min(log10(vol.dat$volume)), max(log10(vol.dat$volume)), length = length(vol.dat$species))
> m.x <- mean(round(log(vol.dat$volume), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.s
> lower.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.i
> 
> 
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(vol.dat$kingdom)))
> vol.dat$kingdom <- as.factor(vol.dat$kingdom)
> 
> #plot(log10(doubling_h) ~ log10(volume), data = v.dat, type = "p", pch = 16, las = 1, ylab = expression(paste("Doubling")~log[10]*(h)), xlab = expression(paste("Cell volume")~log[10]*(mu*m^3)), type = "n")
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "n", pch = 16, las = 1, ylab = expression(paste("Doubling ", log[10], sep = " ")*(h)), xlab = expression(paste("Cell volume ", log[10], sep = " ")(mu*m^3)))
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "p", pch = 16, col = cols[vol.dat$kingdom], bg = cols[vol.dat$kingdom], las = 1, ylab = "", xlab = "", axes = FALSE)
> 
> lines(x, y = (coef(pg.mod)[1] + coef(pg.mod)[2]*x), lwd = 2)
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> #legend("topright", legend = paste("n =", length(vol.dat$species), sep = " "), bty = "n")
> legend("bottomleft", legend = unique(vol.dat$kingdom), pch = 16, col = cols, bg = cols, bty = "n")
> 
> #dev.off()
> SSX <- sum(round((log10(vol.dat$volume) - mean(log10(vol.dat$volume)))^2), 2)
> s2 <- var(log10(vol.dat$doubling_h))
> n <- length(vol.dat$doubling_h)
> x <- seq(min(log10(vol.dat$volume)), max(log10(vol.dat$volume)), length = length(vol.dat$species))
> m.x <- mean(round(log(vol.dat$volume), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.s
> lower.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.i
> 
> 
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(vol.dat$kingdom)))
> vol.dat$kingdom <- as.factor(vol.dat$kingdom)
> 
> #plot(log10(doubling_h) ~ log10(volume), data = v.dat, type = "p", pch = 16, las = 1, ylab = expression(paste("Doubling")~log[10]*(h)), xlab = expression(paste("Cell volume")~log[10]*(mu*m^3)), type = "n")
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "n", pch = 16, las = 1, ylab = expression(paste("Doubling ", log[10], sep = " ")*(h)), xlab = expression(paste("Cell volume ", log[10], sep = " ")(mu*m^3)))
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "p", pch = 16, col = cols[vol.dat$kingdom], bg = cols[vol.dat$kingdom], las = 1, ylab = "", xlab = "", axes = FALSE)
> 
> lines(x, y = (coef(pg.mod)[1] + coef(pg.mod)[2]*x), lwd = 2)
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> #legend("topright", legend = paste("n =", length(vol.dat$species), sep = " "), bty = "n")
> legend("bottomleft", legend = unique(vol.dat$kingdom), pch = 16, col = cols, bg = cols, bty = "n")
> spp.d1_up <- data[!is.na(data$d1_up), ]
> spp.temp.op <- data[!is.na(data$optimum_tmp), ]
> spp.growth_temp <- data[!is.na(data$growth_tmp), ]
> spp.doubling <- data[!is.na(data$doubling_h), ]
> 
> d1_up <- aggregate(spp.d1_up$d1_up, by = list(spp.d1_up$species), mean, na.action = na.rm)
> doubling <- aggregate(spp.doubling$doubling_h, by = list(spp.doubling$species), mean, na.action = na.rm)
> temp.op <- aggregate(spp.temp.op$optimum_tmp, by = list(spp.temp.op$species), mean, na.action = na.rm)
> growth_temp <- aggregate(spp.growth_temp$growth_tmp, by = list(spp.growth_temp$species), mean, na.action = na.rm)
> 
> dim(doubling)
[1] 928   2
> dim(doubling)
[1] 928   2
> names(doubling) <- c("species", "doubling_h")
> dim(d1_up)
[1] 1603    2
> names(d1_up) <- c("species", "d1_up")
> dim(temp.op)
[1] 7023    2
> names(temp.op) <- c("species", "tmp.op")
> dim(growth_temp)
[1] 11638     2
> names(growth_temp) <- c("species", "growth_tmp")
> 
> 
> mrg.tmp <- merge(temp.op, growth_temp, by = "species")
> str(mrg.tmp)
'data.frame':	5390 obs. of  3 variables:
 $ species   : chr  "'Sphingomonas ginsengisoli' Hoang et al. 2012" "[Bacillus] selenitireducens" "[Bacteroides] pectinophilus" "[Clostridium] alkalicellulosi" ...
 $ tmp.op    : num  30 26 37.5 35 60 ...
 $ growth_tmp: num  28 26 37 36.2 55 ...
> 
> 
> mrg.op.tmp <- mrg.tmp[mrg.tmp$growth_tmp == mrg.tmp$tmp.op, ]
> mrg.upper.tmp <- mrg.tmp[mrg.tmp$growth_tmp > mrg.tmp$tmp.op, ]
> mrg.lower.tmp <- mrg.tmp[mrg.tmp$growth_tmp < mrg.tmp$tmp.op, ]
> 
> mrg.tmp.op <- merge(mrg.op.tmp, d1_up, by = "species")
> str(mrg.tmp.op)
'data.frame':	321 obs. of  4 variables:
 $ species   : chr  "[Clostridium] lavalense" "[Hallella] seregens" "Acaricomes phytoseiuli" "Acetomicrobium hydrogeniformans" ...
 $ tmp.op    : num  36 37 25 55 25 37 30 25 25 30 ...
 $ growth_tmp: num  36 37 25 55 25 37 30 25 25 30 ...
 $ d1_up     : num  1.5 1.5 0.8 0.5 0.8 1 1.7 0.5 0.6 0.7 ...
> 
> mrg.tmp.upper <- merge(mrg.upper.tmp, d1_up, by = "species")
> str(mrg.tmp.upper)
'data.frame':	375 obs. of  4 variables:
 $ species   : chr  "Acetohalobium arabaticum" "Acidaminococcus fermentans" "Acidisoma tundrae" "Actinocatenispora thailandica" ...
 $ tmp.op    : num  34 35.2 18.5 27.5 26.5 ...
 $ growth_tmp: num  37 37 20 29 28 ...
 $ d1_up     : num  1 1 1.5 0.4 2 1.8 0.5 1 0.4 1 ...
> 
> mrg.tmp.lower <- merge(mrg.lower.tmp, d1_up, by = "species")
> str(mrg.tmp.lower)
'data.frame':	629 obs. of  4 variables:
 $ species   : chr  "[Clostridium] caenicola" "[Clostridium] fimetarium" "[Clostridium] paradoxum" "[Clostridium] stercorarium" ...
 $ tmp.op    : num  60 22.5 56 62.1 33 ...
 $ growth_tmp: num  55 20 55.2 60 30 ...
 $ d1_up     : num  0.6 0.6 1.1 0.8 0.6 1 0.2 0.9 1 1.2 ...
> 
> mrg.tmp.op.growth <- merge(mrg.tmp.op, doubling, by = "species")
> str(mrg.tmp.op.growth)
'data.frame':	46 obs. of  5 variables:
 $ species   : chr  "Anaerolinea thermolimosa" "Brucella abortus" "Colwellia piezophila" "Desulfovibrio inopinatus" ...
 $ tmp.op    : num  50 37 10 30 50 25 36 37 55 65 ...
 $ growth_tmp: num  50 37 10 30 50 25 36 37 55 65 ...
 $ d1_up     : num  0.4 0.7 1 1.5 0.28 0.9 1.6 1.2 1 0.9 ...
 $ doubling_h: num  48 2 4.83 20 3.5 7.3 1.33 14 1.16 1.75 ...
> 
> mrg.tmp.upper.growth <- merge(mrg.tmp.upper, doubling, by = "species")
> str(mrg.tmp.upper.growth)
'data.frame':	59 obs. of  5 variables:
 $ species   : chr  "Alkalibacterium iburiense" "Anaerobranca gottschalkii" "Archaeoglobus fulgidus" "Azotobacter chroococcum" ...
 $ tmp.op    : num  33.5 52.5 77.7 26.2 33 ...
 $ growth_tmp: num  37 52.6 78.3 28 38.5 ...
 $ d1_up     : num  0.7 0.5 1 2.3 1.2 1 0.5 0.7 1.5 6.3 ...
 $ doubling_h: num  2.39 0.8 11.75 0.45 1.51 ...
> 
> mrg.tmp.lower.growth <- merge(mrg.tmp.lower, doubling, by = "species")
> str(mrg.tmp.lower.growth)
'data.frame':	104 obs. of  5 variables:
 $ species   : chr  "[Clostridium] paradoxum" "[Clostridium] stercorarium" "Acetomicrobium mobile" "Alicyclobacillus acidocaldarius" ...
 $ tmp.op    : num  56 62.1 56.2 60.4 47.5 ...
 $ growth_tmp: num  55.2 60 54.3 59.4 46.2 ...
 $ d1_up     : num  1.1 0.8 1 0.9 1 0.8 1 0.8 0.6 0.2 ...
 $ doubling_h: num  0.67 8.6 3.39 0.38 1.5 ...
> 
> 
> obj <- rep()
> for(i in mrg.tmp.op$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.op$kingdom <- obj
> head(mrg.tmp.op)
                          species tmp.op growth_tmp d1_up  kingdom
1         [Clostridium] lavalense     36         36   1.5 Bacteria
2             [Hallella] seregens     37         37   1.5 Bacteria
3          Acaricomes phytoseiuli     25         25   0.8 Bacteria
4 Acetomicrobium hydrogeniformans     55         55   0.5 Bacteria
5                Acidicapsa ligni     25         25   0.8 Bacteria
6            Actinomyces georgiae     37         37   1.0 Bacteria
> 
> mrg.tmp.op$species <- gsub("[[:punct:]]", "", mrg.tmp.op$species)
> mrg.tmp.op$species <- gsub(" ", "_", mrg.tmp.op$species)
> rownames(mrg.tmp.op) <- mrg.tmp.op$species
> head(mrg.tmp.op$species)
[1] "Clostridium_lavalense"           "Hallella_seregens"              
[3] "Acaricomes_phytoseiuli"          "Acetomicrobium_hydrogeniformans"
[5] "Acidicapsa_ligni"                "Actinomyces_georgiae"           
> 
> check <- name.check(tree, mrg.tmp.op)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.op <- drop.tip(tree, rm_phy)
> 
> tmp.op.dat <- subset(mrg.tmp.op, subset = mrg.tmp.op$species %in% tree.tmp.op$tip, select = names(mrg.tmp.op))
> name.check(tree.tmp.op, tmp.op.dat)
[1] "OK"
> 
> 
> 
> 
> 
> 
> obj <- rep()
> for(i in mrg.tmp.upper$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.upper$kingdom <- obj
> head(mrg.tmp.upper)
                        species tmp.op growth_tmp d1_up  kingdom
1      Acetohalobium arabaticum  34.00         37   1.0 Bacteria
2    Acidaminococcus fermentans  35.25         37   1.0 Bacteria
3             Acidisoma tundrae  18.50         20   1.5 Bacteria
4 Actinocatenispora thailandica  27.50         29   0.4 Bacteria
5    Actinokineospora baliensis  26.50         28   2.0 Bacteria
6 Actinokineospora cibodasensis  26.50         28   1.8 Bacteria
> 
> mrg.tmp.upper$species <- gsub("[[:punct:]]", "", mrg.tmp.upper$species)
> mrg.tmp.upper$species <- gsub(" ", "_", mrg.tmp.upper$species)
> rownames(mrg.tmp.upper) <- mrg.tmp.upper$species
> head(mrg.tmp.upper$species)
[1] "Acetohalobium_arabaticum"      "Acidaminococcus_fermentans"   
[3] "Acidisoma_tundrae"             "Actinocatenispora_thailandica"
[5] "Actinokineospora_baliensis"    "Actinokineospora_cibodasensis"
> 
> check <- name.check(tree, mrg.tmp.upper)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.upper <- drop.tip(tree, rm_phy)
> 
> tmp.upper.dat <- subset(mrg.tmp.upper, subset = mrg.tmp.upper$species %in% tree.tmp.upper$tip, select = names(mrg.tmp.upper))
> name.check(tree.tmp.upper, tmp.upper.dat)
[1] "OK"
> 
> 
> 
> 
> 
> 
> 
> obj <- rep()
> for(i in mrg.tmp.lower$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.lower$kingdom <- obj
> head(mrg.tmp.lower)
                     species   tmp.op growth_tmp d1_up  kingdom
1    [Clostridium] caenicola 60.00000      55.00   0.6 Bacteria
2   [Clostridium] fimetarium 22.50000      20.00   0.6 Bacteria
3    [Clostridium] paradoxum 56.00000      55.25   1.1 Bacteria
4 [Clostridium] stercorarium 62.08333      60.00   0.8 Bacteria
5    [Clostridium] sufflavum 33.00000      30.00   0.6 Bacteria
6  Acanthopleuribacter pedis 30.00000      25.00   1.0 Bacteria
> 
> mrg.tmp.lower$species <- gsub("[[:punct:]]", "", mrg.tmp.lower$species)
> mrg.tmp.lower$species <- gsub(" ", "_", mrg.tmp.lower$species)
> rownames(mrg.tmp.lower) <- mrg.tmp.lower$species
> head(mrg.tmp.lower$species)
[1] "Clostridium_caenicola"     "Clostridium_fimetarium"   
[3] "Clostridium_paradoxum"     "Clostridium_stercorarium" 
[5] "Clostridium_sufflavum"     "Acanthopleuribacter_pedis"
> 
> check <- name.check(tree, mrg.tmp.lower)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.lower <- drop.tip(tree, rm_phy)
> 
> tmp.lower.dat <- subset(mrg.tmp.lower, subset = mrg.tmp.lower$species %in% tree.tmp.lower$tip, select = names(mrg.tmp.lower))
> name.check(tree.tmp.lower, tmp.lower.dat)
[1] "OK"
> 
> 
> 
> 
> 
> ## Growth
> 
> 
> 
> 
> obj <- rep()
> for(i in mrg.tmp.op.growth$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.op.growth$kingdom <- obj
> head(mrg.tmp.op.growth)
                       species tmp.op growth_tmp d1_up doubling_h  kingdom
1     Anaerolinea thermolimosa     50         50  0.40      48.00 Bacteria
2             Brucella abortus     37         37  0.70       2.00 Bacteria
3         Colwellia piezophila     10         10  1.00       4.83 Bacteria
4     Desulfovibrio inopinatus     30         30  1.50      20.00 Bacteria
5       Exilispira thermophila     50         50  0.28       3.50 Bacteria
6 Flavobacterium denitrificans     25         25  0.90       7.30 Bacteria
> 
> mrg.tmp.op.growth$species <- gsub("[[:punct:]]", "", mrg.tmp.op.growth$species)
> mrg.tmp.op.growth$species <- gsub(" ", "_", mrg.tmp.op.growth$species)
> rownames(mrg.tmp.op.growth) <- mrg.tmp.op.growth$species
> head(mrg.tmp.op.growth$species)
[1] "Anaerolinea_thermolimosa"     "Brucella_abortus"            
[3] "Colwellia_piezophila"         "Desulfovibrio_inopinatus"    
[5] "Exilispira_thermophila"       "Flavobacterium_denitrificans"
> 
> check <- name.check(tree, mrg.tmp.op.growth)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.op.growth <- drop.tip(tree, rm_phy)
> 
> tmp.op.dat.growth <- subset(mrg.tmp.op.growth, subset = mrg.tmp.op.growth$species %in% tree.tmp.op.growth$tip, select = names(mrg.tmp.op.growth))
> name.check(tree.tmp.op.growth, tmp.op.dat.growth)
[1] "OK"
> 
> 
> 
> 
> 
> 
> obj <- rep()
> for(i in mrg.tmp.upper.growth$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.upper.growth$kingdom <- obj
> head(mrg.tmp.upper.growth)
                          species   tmp.op growth_tmp d1_up doubling_h  kingdom
1       Alkalibacterium iburiense 33.50000   37.00000   0.7       2.39 Bacteria
2       Anaerobranca gottschalkii 52.50000   52.65000   0.5       0.80 Bacteria
3          Archaeoglobus fulgidus 77.66667   78.33333   1.0      11.75  Archaea
4         Azotobacter chroococcum 26.20000   28.00000   2.3       0.45 Bacteria
5              Bacillus anthracis 33.00000   38.50000   1.2       1.51 Bacteria
6 Caldicellulosiruptor acetigenus 66.50000   67.45000   1.0       4.93 Bacteria
> 
> mrg.tmp.upper.growth$species <- gsub("[[:punct:]]", "", mrg.tmp.upper.growth$species)
> mrg.tmp.upper.growth$species <- gsub(" ", "_", mrg.tmp.upper.growth$species)
> rownames(mrg.tmp.upper.growth) <- mrg.tmp.upper.growth$species
> head(mrg.tmp.upper.growth$species)
[1] "Alkalibacterium_iburiense"       "Anaerobranca_gottschalkii"      
[3] "Archaeoglobus_fulgidus"          "Azotobacter_chroococcum"        
[5] "Bacillus_anthracis"              "Caldicellulosiruptor_acetigenus"
> 
> check <- name.check(tree, mrg.tmp.upper.growth)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.upper.growth <- drop.tip(tree, rm_phy)
> 
> tmp.upper.dat.growth <- subset(mrg.tmp.upper.growth, subset = mrg.tmp.upper.growth$species %in% tree.tmp.upper.growth$tip, select = names(mrg.tmp.upper.growth))
> name.check(tree.tmp.upper.growth, tmp.upper.dat.growth)
[1] "OK"
> 
> 
> 
> 
> 
> 
> 
> obj <- rep()
> for(i in mrg.tmp.lower.growth$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.lower.growth$kingdom <- obj
> head(mrg.tmp.lower.growth)
                          species   tmp.op growth_tmp d1_up doubling_h  kingdom
1         [Clostridium] paradoxum 56.00000   55.25000   1.1       0.67 Bacteria
2      [Clostridium] stercorarium 62.08333   60.00000   0.8       8.60 Bacteria
3           Acetomicrobium mobile 56.25000   54.30000   1.0       3.39 Bacteria
4 Alicyclobacillus acidocaldarius 60.40000   59.36667   0.9       0.38 Bacteria
5        Alicyclobacillus pomorum 47.50000   46.25000   1.0       1.50 Bacteria
6              Bacillus coagulans 50.40000   44.30000   0.8       0.72 Bacteria
> 
> mrg.tmp.lower.growth$species <- gsub("[[:punct:]]", "", mrg.tmp.lower.growth$species)
> mrg.tmp.lower.growth$species <- gsub(" ", "_", mrg.tmp.lower.growth$species)
> rownames(mrg.tmp.lower.growth) <- mrg.tmp.lower.growth$species
> head(mrg.tmp.lower.growth$species)
[1] "Clostridium_paradoxum"           "Clostridium_stercorarium"       
[3] "Acetomicrobium_mobile"           "Alicyclobacillus_acidocaldarius"
[5] "Alicyclobacillus_pomorum"        "Bacillus_coagulans"             
> 
> check <- name.check(tree, mrg.tmp.lower.growth)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.lower.growth <- drop.tip(tree, rm_phy)
> 
> tmp.lower.dat.growth <- subset(mrg.tmp.lower.growth, subset = mrg.tmp.lower.growth$species %in% tree.tmp.lower.growth$tip, select = names(mrg.tmp.lower.growth))
> name.check(tree.tmp.lower.growth, tmp.lower.dat.growth)
[1] "OK"
> 
> 
> tmp.lower.dat <- tmp.lower.dat[tmp.lower.dat$d1_up < 4, ] ## Removing potential outliers
> tmp.op.dat <- tmp.op.dat[tmp.op.dat$d1_up < 4, ] ## Removing potential outliers
> tmp.upper.dat <- tmp.upper.dat[tmp.upper.dat$d1_up < 4, ] ## Removing potential outliers
> 
> 
> #png("figure4.png", height = 7, width = 7, units = "in", res = 360)
> 
> 
> layout(matrix(c(1, 1, 2, 2, 3, 3,
+                 1, 1, 2, 2, 3, 3,
+                 4, 4, 5, 5, 6, 6,
+                 4, 4, 5, 5, 6, 6), nrow = 4, ncol = 6, byrow = TRUE))
> 
> 
> 
> ## lower
> 
> 
> tmp.lower.dat <- tmp.lower.dat[tmp.lower.dat$d1_up < 4, ] ## Removing potential outliers
> 
> 
> model6.1 <- lm(d1_up ~ log10(tmp.op), data = tmp.lower.dat)
> 
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.lower.dat$tmp.op) - mean(log10(tmp.lower.dat$tmp.op)))^2), 2)
> s2 <- var(tmp.lower.dat$d1_up)
> n <- length(tmp.lower.dat$d1_up)
> x <- seq(min(log10(tmp.lower.dat$tmp.op)), max(log10(tmp.lower.dat$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.lower.dat$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model6.1)[1] + coef(model6.1)[2]*x) + ic.s
> lower.i <- (coef(model6.1)[1] + coef(model6.1)[2]*x) + ic.i
> 
> par(mar = c(6.4, 4, 2, 0), mgp = c(2.8, 1, 0))
>     
> plot(d1_up ~ log10(tmp.op), data = tmp.lower.dat, ylab = expression(paste("Cell diameter ", log[10], sep = " ")(mu*m)), xlab = expression(paste("Lower temperature \u00B0C")~(log[10])), las = 1, pch = 21, cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(tmp.lower.dat$kingdom)))
> 
> plot(d1_up ~ log10(tmp.op), data = tmp.lower.dat, xlab = "", ylab = "", las = 1, pch = 21, col = cols[tmp.lower.dat$kingdom], bg = cols[tmp.lower.dat$kingdom], cex = 0.8, axes = FALSE)
> 
> #lines(x = x, y = (coef(model6.1)[1] + coef(model6.1)[2]*x), lwd = 2, col = "black")
> #polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("topleft", legend = levels(as.factor((tmp.lower.dat$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> legend("topright", legend = paste("n = ", length(tmp.lower.dat$species)), bty = "n", cex = 0.8)
> 
> mtext("A", side = 2, line = 2.6, at = 3.8, las = 1, font = 2)
> 
> 
> ## Cell size and temp opt
> 
> tmp.op.dat <- tmp.op.dat[tmp.op.dat$d1_up < 4, ] ## Removing potential outliers
> 
> #model6 <- gls(d1_up ~ log10(tmp.op), correlation = corBrownian(phy = tree.tmp, form = ~species), data = tmp.dat, method = "ML")
> 
> #model6 <- lm(d1_up ~ log10(tmp.op), data = tmp.dat)
> model6 <- lm(d1_up ~ log10(tmp.op), data = tmp.op.dat)
> 
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.op.dat$tmp.op) - mean(log10(tmp.op.dat$tmp.op)))^2), 2)
> s2 <- var(tmp.op.dat$d1_up)
> n <- length(tmp.op.dat$d1_up)
> x <- seq(min(log10(tmp.op.dat$tmp.op)), max(log10(tmp.op.dat$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.op.dat$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model6)[1] + coef(model6)[2]*x) + ic.s
> lower.i <- (coef(model6)[1] + coef(model6)[2]*x) + ic.i
> 
> 
> par(mar = c(6.4, 2.3, 2, 0.1))
> 
> plot(d1_up ~ log10(tmp.op), data = tmp.op.dat, ylab = " ",  xlab = expression(paste("Optimum temperature \u00B0C")~(log[10])), las = 1, pch = 21, cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(tmp.op.dat$kingdom)))
> 
> plot(d1_up ~ log10(tmp.op), data = tmp.op.dat, xlab = "", ylab = "", las = 1, pch = 21, col = cols[tmp.op.dat$kingdom], bg = cols[tmp.op.dat$kingdom], cex = 0.8, axes = FALSE)
> 
> #lines(x = x, y = (coef(model6)[1] + coef(model6)[2]*x), lwd = 2, col = "black")
> #polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("topleft", legend = levels(as.factor((tmp.op.dat$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> legend(x = 0.7, y = 3.07, legend = paste("n = ", length(tmp.op.dat$species)), bty = "n", cex = 0.8)
> 
> 
> 
> 
> 
> ## upper
> 
> 
> tmp.upper.dat <- tmp.upper.dat[tmp.upper.dat$d1_up < 4, ] ## Removing potential outliers
> 
> 
> model6.3 <- lm(d1_up ~ log10(tmp.op), data = tmp.upper.dat)
> 
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.upper.dat$tmp.op) - mean(log10(tmp.upper.dat$tmp.op)))^2), 2)
> s2 <- var(tmp.upper.dat$d1_up)
> n <- length(tmp.upper.dat$d1_up)
> x <- seq(min(log10(tmp.upper.dat$tmp.op)), max(log10(tmp.upper.dat$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.upper.dat$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model6.3)[1] + coef(model6.3)[2]*x) + ic.s
> lower.i <- (coef(model6.3)[1] + coef(model6.3)[2]*x) + ic.i
> 
> 
> par(mar = c(6.4, 2.3, 2, 0.2))
> 
> plot(d1_up ~ log10(tmp.op), data = tmp.upper.dat, ylab = " ", xlab = expression(paste("Upper temperature \u00B0C")~(log[10])), las = 1, pch = 21, cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(tmp.upper.dat$kingdom)))
> 
> plot(d1_up ~ log10(tmp.op), data = tmp.upper.dat, xlab = "", ylab = "", las = 1, pch = 21, col = cols[tmp.upper.dat$kingdom], bg = cols[tmp.upper.dat$kingdom], cex = 0.8, axes = FALSE)
> 
> lines(x = x, y = (coef(model6.3)[1] + coef(model6.3)[2]*x), lwd = 2, col = "black")
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("topleft", legend = levels(as.factor((tmp.upper.dat$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> legend(x = 0.6, y = 3, legend = paste("n = ", length(tmp.upper.dat$species)), bty = "n", cex = 0.8)
> 
> 
> 
> ## GROWTH
> 
> 
> ## lower
> 
> 
> model7.1 <- lm(log10(doubling_h) ~ log10(tmp.op), data = tmp.lower.dat.growth)
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.lower.dat.growth$tmp.op) - mean(log10(tmp.lower.dat.growth$tmp.op)))^2), 2)
> s2 <- var(log10(tmp.lower.dat.growth$doubling_h))
> n <- length(log10(tmp.lower.dat.growth$doubling_h))
> x <- seq(min(log10(tmp.lower.dat.growth$tmp.op)), max(log10(tmp.lower.dat.growth$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.lower.dat.growth$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model7.1)[1] + coef(model7.1)[2]*x) + ic.s
> lower.i <- (coef(model7.1)[1] + coef(model7.1)[2]*x) + ic.i
> 
> par(mar = c(6.4, 4, 2, 0), mgp = c(2.8, 1, 0))
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.lower.dat.growth, ylab = expression(paste("Doubling ", log[10], sep = " ")(h)), xlab = expression(paste("Lower temperature \u00B0C ")~(log[10])), las = 1, pch = 21, bg = alpha("black", 0.3), cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols3 <- c("purple", "orange")[as.numeric(as.factor(tmp.lower.dat.growth$kingdom))]
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.lower.dat.growth, xlab = "", ylab = "", las = 1, pch = 21, col = cols3, bg = cols3, cex = 0.8, axes = FALSE)
> 
> lines(x = x, y = (coef(model7.1)[1] + coef(model7.1)[2]*x), lty = 2, lwd = 2, col = "black")
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("bottomleft", legend = levels(as.factor((tmp.lower.dat.growth$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> 
> mtext("B", side = 2, line = 2.6, at = 3, las = 1, font = 2)
> legend("topright", legend = paste("n = ", length(tmp.lower.dat.growth$species)), bty = "n", cex = 0.8)
> 
> 
> ## Doubling and optimum temp
> 
> #model7 <- gls(log(doubling_h) ~ log(tmp.op), correlation = corBrownian(phy = tree.tmp2, form = ~species), data = tmp.dat2, method = "ML")
> 
> model7 <- lm(log10(doubling_h) ~ log10(tmp.op), data = tmp.op.dat.growth)
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.op.dat.growth$tmp.op) - mean(log10(tmp.op.dat.growth$tmp.op)))^2), 2)
> s2 <- var(log10(tmp.op.dat.growth$doubling_h))
> n <- length(log10(tmp.op.dat.growth$doubling_h))
> x <- seq(min(log10(tmp.op.dat.growth$tmp.op)), max(log10(tmp.op.dat.growth$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.op.dat.growth$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.s
> lower.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.i
> 
> 
> par(mar = c(6.4, 2.3, 2, 0.1))
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.op.dat.growth, ylab = expression(paste("Doubling ", log[10], sep = " ")(h)), xlab = expression(paste("Optimum temperature \u00B0C ")~(log[10])), las = 1, pch = 21, bg = alpha("black", 0.3), cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols3 <- c("purple", "orange")[as.numeric(as.factor(tmp.op.dat.growth$kingdom))]
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.op.dat.growth, xlab = "", ylab = "", las = 1, pch = 21, col = cols3, bg = cols3, cex = 0.8, axes = FALSE)
> 
> lines(x = x, y = (coef(model7)[1] + coef(model7)[2]*x), lty = 2, lwd = 2, col = "black")
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("bottomleft", legend = levels(as.factor((tmp.op.dat.growth$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> legend(x = 0.92, y = 0.12, legend = paste("n = ", length(tmp.op.dat.growth$species)), bty = "n", cex = 0.8)
> 
> 
> ## upper
> 
> 
> model7.2 <- lm(log10(doubling_h) ~ log10(tmp.op), data = tmp.upper.dat.growth)
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.upper.dat.growth$tmp.op) - mean(log10(tmp.upper.dat.growth$tmp.op)))^2), 2)
> s2 <- var(log10(tmp.upper.dat.growth$doubling_h))
> n <- length(log10(tmp.upper.dat.growth$doubling_h))
> x <- seq(min(log10(tmp.upper.dat.growth$tmp.op)), max(log10(tmp.upper.dat.growth$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.upper.dat.growth$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model7.2)[1] + coef(model7.2)[2]*x) + ic.s
> lower.i <- (coef(model7.2)[1] + coef(model7.2)[2]*x) + ic.i
> 
> par(mar = c(6.4, 2.3, 2, 0.2))
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.upper.dat.growth, ylab = expression(paste("Doubling ", log[10], sep = " ")(h)), xlab = expression(paste("Upper temperature \u00B0C ")~(log[10])), las = 1, pch = 21, bg = alpha("black", 0.3), cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols3 <- c("purple", "orange")[as.numeric(as.factor(tmp.upper.dat.growth$kingdom))]
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.upper.dat.growth, xlab = "", ylab = "", las = 1, pch = 21, col = cols3, bg = cols3, cex = 0.8, axes = FALSE)
> 
> lines(x = x, y = (coef(model7.2)[1] + coef(model7.2)[2]*x), lty = 2, lwd = 2, col = "black")
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("bottomleft", legend = levels(as.factor((tmp.upper.dat.growth$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> legend(x = 0.6, y = -0.1, legend = paste("n = ", length(tmp.upper.dat.growth$species)), bty = "n", cex = 0.8)
> 
> #dev.off()
> 
> quartz()
> layout(matrix(c(0, 0, 0, 0,
+                 1, 1, 2, 2,
+                 1, 1, 2, 2,
+                 0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE))
> 
> ## IC
> 
> SSX <- sum(round((log10(vol.dat$volume) - mean(log10(vol.dat$volume)))^2), 2)
> s2 <- var(log10(vol.dat$doubling_h))
> n <- length(vol.dat$doubling_h)
> x <- seq(min(log10(vol.dat$volume)), max(log10(vol.dat$volume)), length = length(vol.dat$species))
> m.x <- mean(round(log(vol.dat$volume), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.s
> lower.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.i
> 
> 
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(vol.dat$kingdom)))
> vol.dat$kingdom <- as.factor(vol.dat$kingdom)
> 
> #plot(log10(doubling_h) ~ log10(volume), data = v.dat, type = "p", pch = 16, las = 1, ylab = expression(paste("Doubling")~log[10]*(h)), xlab = expression(paste("Cell volume")~log[10]*(mu*m^3)), type = "n")
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "n", pch = 21, las = 1, ylab = expression(paste("Doubling ", log[10], sep = " ")*(h)), xlab = expression(paste("Cell volume ", log[10], sep = " ")(mu*m^3)))
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "p", pch = 21, col = cols[vol.dat$kingdom], bg = cols[vol.dat$kingdom], las = 1, ylab = "", xlab = "", axes = FALSE)
> 
> lines(x, y = (coef(pg.mod)[1] + coef(pg.mod)[2]*x), lwd = 2)
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> #legend("topright", legend = paste("n =", length(vol.dat$species), sep = " "), bty = "n")
> legend("bottomleft", legend = unique(vol.dat$kingdom), pch = 16, col = cols, bg = cols, bty = "n")
> legend(x = -2.6, y = 0, legend = paste(" = ", round(as.data.frame(summary(pg.mod)$tTable)[2, 1], 3)), bty = "n")
> legend(x = -2.7, y = 0, legend = expression(beta), bty = "n")
> legend(x = -2.7, y = -0.13, legend = paste("p = ", round(as.data.frame(summary(pg.mod)$tTable)[2, 4], 3)), bty = "n")
> mtext("A", side = 2, at = 1.6, line = 2.5, las = 1, font = 2)
> 
> 
> ## Doubling and optimum temp
> 
> mod.fg1 <- lm(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth)
> 
> #mod.fg1.pg <- gls(log10(doubling_h) ~ d1_up, correlation = corBrownian(phy = tree.tmp.op.growth, form = ~species), data = tmp.op.dat.growth, method = "ML")
> 
> ## IC
> 
> #SSX <- sum(round((log10(tmp.op.dat.growth$tmp.op) - mean(log10(tmp.op.dat.growth$tmp.op)))^2), 2)
> #s2 <- var(log10(tmp.op.dat.growth$doubling_h))
> #n <- length(log10(tmp.op.dat.growth$doubling_h))
> #x <- seq(min(log10(tmp.op.dat.growth$tmp.op)), max(log10(tmp.op.dat.growth$tmp.op)), length = 30)
> #m.x <- mean(round(log10(tmp.op.dat.growth$tmp.op), 1))
> #se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> #is <- qt(0.975, df = n - 2)
> #ii <- qt(0.025, df = n - 2)
> #ic.s <- se*is
> #ic.i <- se*ii
> #upper.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.s
> #lower.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.i
> 
> 
> plot(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth, ylab = expression(paste("Doubling ", log[10], sep = " ")(h)), xlab = expression(paste("Cell diameter")~log[10]~(mu*m)), las = 1, pch = 21, bg = alpha("black", 0.3), cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols3 <- c("purple", "orange")[as.numeric(as.factor(tmp.op.dat.growth$kingdom))]
> 
> plot(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth, xlab = "", ylab = "", las = 1, pch = 21, col = cols3, bg = cols3, cex = 1, axes = FALSE)
> 
> #lines(x = x, y = (coef(model7)[1] + coef(model7)[2]*x), lty = 2, lwd = 2, col = "black")
> #polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("bottomleft", legend = levels(as.factor((tmp.op.dat.growth$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 1)
> 
> mtext("B", side = 2, at = 2.35, line = 2.3, las = 1, font = 2)
> 
> ##dev.off()
> ## Translation
> 
> tRNA <- aggregate(spp.tRNA$tRNA_genes, by = list(spp.tRNA$species), mean, na.action = na.rm)
> rRNA <- aggregate(spp.rRNA$rRNA16S_genes, by = list(spp.rRNA$species), mean, na.action = na.rm)
> cell.vol <- aggregate(vol$volume, by = list(vol$species), mean)
> d1_up <- aggregate(spp.d1_up$d1_up, by = list(spp.d1_up$species), mean, na.action = na.rm)
> doubling <- aggregate(spp.doubling$doubling_h, by = list(spp.doubling$species), mean, na.action = na.rm)
> 
> 
> #dim(tRNA)
> names(tRNA) <- c("species", "tRNA")
> #dim(rRNA)
> names(rRNA) <- c("species", "rRNA")
> #dim(cell.vol)
> names(cell.vol) <- c("species", "volume")
> #dim(d1_up)
> names(d1_up) <- c("species", "d1_up")
> #dim(doubling)
> names(doubling) <- c("species", "doubling_h")
> 
> 
> genes <- merge(rRNA, tRNA, by = "species")
> tran <- merge(genes, cell.vol, by = "species")
> tran2 <- merge(genes, d1_up, by = "species")
> tran3 <- merge(genes, doubling, by = "species")
> 
> obj <- rep()
> for(i in tran$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> tran$kingdom <- obj
> #head(tran)
> 
> tran$species <- gsub("[[:punct:]]", "", tran$species)
> tran$species <- gsub(" ", "_", tran$species)
> #head(tran)
> 
> tran <- tran[!tran$species == "Sphingopyxis_alaskensis", ] ## possible outlier
> rownames(tran) <- tran$species
> 
> tran.tree <- read.tree("tran.spp.nwk")
Error in file(file, "r") : cannot open the connection
In addition: Warning message:
In file(file, "r") :
  cannot open file 'tran.spp.nwk': No such file or directory
> #tran.tree <- force.ultrametric(tran.tree)
> 
> check <- name.check(tran.tree, tran)
Error: object 'tran.tree' not found
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tran <- drop.tip(tran.tree, rm_phy)
Error: object 'tran.tree' not found
> 
> tran.dat <- subset(tran, subset = tran$species %in% tree.tran$tip, select = names(tran))
Error in eval(e, x, parent.frame()) : object 'tree.tran' not found
> #name.check(tree.tran, tran.dat)
> #str(tran.dat)
> 
> 
> obj <- rep()
> for(i in tran2$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> tran2$kingdom <- obj
> #head(tran)
> 
> tran2$species <- gsub("[[:punct:]]", "", tran2$species)
> tran2$species <- gsub(" ", "_", tran2$species)
> rownames(tran2) <- tran2$species
> #head(tran2)
> 
> check <- name.check(tree, tran2)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tran2 <- drop.tip(tree, rm_phy)
> 
> tran.dat2 <- subset(tran2, subset = tran2$species %in% tree$tip, select = names(tran2))
> #name.check(tree.tran2, tran.dat2)
> #str(tran.dat2)
> 
> 
> obj <- rep()
> for(i in tran3$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> tran3$kingdom <- obj
> #head(tran)
> 
> tran3$species <- gsub("[[:punct:]]", "", tran3$species)
> tran3$species <- gsub(" ", "_", tran3$species)
> rownames(tran3) <- tran3$species
> #head(tran3)
> 
> check <- name.check(tree, tran3)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tran3 <- drop.tip(tree, rm_phy)
> 
> tran.dat3 <- subset(tran3, subset = tran3$species %in% tree.tran3$tip, select = names(tran3))
> ##str(tran.dat3)
> 
> ##mod2 <- lm(log10(rRNA) ~ log10(volume)*log10(tRNA), data = tran.dat)
> #summary(mod2)
> 
> #mod2.1 <- lm(log10(rRNA) ~ d1_up*log10(tRNA), data = tran2)
> #summary(mod2.1)
> 
> #mod3.lm <- lm(log10(rRNA) ~ log10(volume), data = tran.dat)
> #summary(mod3.lm)
> 
> #mod3.1.lm <- lm(log10(rRNA) ~ d1_up, data = tran2)
> #summary(mod3.1.lm)
> 
> #mod3.2.lm <- lm(log10(tRNA) ~ d1_up, data = tran2)
> #summary(mod3.2.lm)
> 
> #mod4.lm <- lm(log10(tRNA) ~ log10(volume), data = tran.dat)
> #summary(mod4.lm)
> 
> mod.gr1 <- lm(log10(rRNA) ~ log10(doubling_h), data = tran3)
> #summary(mod.gr1)
> 
> mod.gr2 <- lm(log10(tRNA) ~ log10(doubling_h), data = tran3)
> #summary(mod.gr2)
> 
> 
> 
> 
> #mod2.pg <- gls(log10(rRNA) ~ log10(volume)*log10(tRNA), correlation = corBrownian(phy = tree.tran, form = ~species), data = tran.dat, method = "ML")
> #summary(mod2.pg)
> 
> #mod2.gr.pg <- gls(log10(rRNA) ~ log10(doubling_h) + log10(doubling_h):log10(tRNA), correlation = corBrownian(phy = tree.tran3, form = ~species), data = tran.dat3, method = "ML")
> #summary(mod2.gr.pg)
> 
> #mod2.gr <- lm(rRNA ~ log10(doubling_h) + log10(doubling_h):log10(tRNA), data = tran3)
> #summary(mod2.gr)
> 
> #mod3 <- gls(log10(rRNA) ~ log10(doubling_h), correlation = corBrownian(phy = tree.tran3, form = ~species), data = tran.dat3, method = "ML")
> #summary(mod3)
> 
> #mod4 <- gls(log10(tRNA) ~ log10(doubling_h), correlation = corBrownian(phy = tree.tran3, form = ~species), data = tran.dat3, method = "ML")
> #summary(mod4)
> 
> 
> SSX <- sum(round((log10(tran.dat$volume) - mean(log10(tran.dat$volume)))^2), 2)
Error: object 'tran.dat' not found
> s2 <- var(log10(tran.dat$rRNA))
Error: object 'tran.dat' not found
> n <- length(tran.dat$rRNA)
Error: object 'tran.dat' not found
> x <- seq(min(log10(tran.dat$volume)), max(log10(tran.dat$volume)), length = length(tran.dat$species))
Error: object 'tran.dat' not found
> m.x <- mean(round(log(tran.dat$volume), 1))
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'x' in selecting a method for function 'mean': object 'tran.dat' not found
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(mod3)[1] + coef(mod3)[2]*x) + ic.s
Error: object 'mod3' not found
> lower.i <- (coef(mod3)[1] + coef(mod3)[2]*x) + ic.i
Error: object 'mod3' not found
> 
> tRNA <- aggregate(spp.tRNA$tRNA_genes, by = list(spp.tRNA$species), mean, na.action = na.rm)
> rRNA <- aggregate(spp.rRNA$rRNA16S_genes, by = list(spp.rRNA$species), mean, na.action = na.rm)
> cell.vol <- aggregate(vol$volume, by = list(vol$species), mean)
> d1_up <- aggregate(spp.d1_up$d1_up, by = list(spp.d1_up$species), mean, na.action = na.rm)
> doubling <- aggregate(spp.doubling$doubling_h, by = list(spp.doubling$species), mean, na.action = na.rm)
> 
> 
> #dim(tRNA)
> names(tRNA) <- c("species", "tRNA")
> #dim(rRNA)
> names(rRNA) <- c("species", "rRNA")
> #dim(cell.vol)
> names(cell.vol) <- c("species", "volume")
> #dim(d1_up)
> names(d1_up) <- c("species", "d1_up")
> #dim(doubling)
> names(doubling) <- c("species", "doubling_h")
> 
> 
> genes <- merge(rRNA, tRNA, by = "species")
> tran <- merge(genes, cell.vol, by = "species")
> tran2 <- merge(genes, d1_up, by = "species")
> tran3 <- merge(genes, doubling, by = "species")
> 
> obj <- rep()
> for(i in tran$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> tran$kingdom <- obj
> #head(tran)
> 
> tran$species <- gsub("[[:punct:]]", "", tran$species)
> tran$species <- gsub(" ", "_", tran$species)
> #head(tran)
> 
> tran <- tran[!tran$species == "Sphingopyxis_alaskensis", ] ## possible outlier
> rownames(tran) <- tran$species
> 
> tran.tree <- read.tree("tran.spp.nwk")
> #tran.tree <- force.ultrametric(tran.tree)
> 
> check <- name.check(tran.tree, tran)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tran <- drop.tip(tran.tree, rm_phy)
> 
> tran.dat <- subset(tran, subset = tran$species %in% tree.tran$tip, select = names(tran))
> #name.check(tree.tran, tran.dat)
> #str(tran.dat)
> 
> 
> obj <- rep()
> for(i in tran2$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> tran2$kingdom <- obj
> #head(tran)
> 
> tran2$species <- gsub("[[:punct:]]", "", tran2$species)
> tran2$species <- gsub(" ", "_", tran2$species)
> rownames(tran2) <- tran2$species
> #head(tran2)
> 
> check <- name.check(tree, tran2)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tran2 <- drop.tip(tree, rm_phy)
> 
> tran.dat2 <- subset(tran2, subset = tran2$species %in% tree$tip, select = names(tran2))
> #name.check(tree.tran2, tran.dat2)
> #str(tran.dat2)
> 
> 
> obj <- rep()
> for(i in tran3$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> tran3$kingdom <- obj
> #head(tran)
> 
> tran3$species <- gsub("[[:punct:]]", "", tran3$species)
> tran3$species <- gsub(" ", "_", tran3$species)
> rownames(tran3) <- tran3$species
> #head(tran3)
> 
> check <- name.check(tree, tran3)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tran3 <- drop.tip(tree, rm_phy)
> 
> tran.dat3 <- subset(tran3, subset = tran3$species %in% tree.tran3$tip, select = names(tran3))
> ##str(tran.dat3)
> 
> ##mod2 <- lm(log10(rRNA) ~ log10(volume)*log10(tRNA), data = tran.dat)
> #summary(mod2)
> 
> #mod2.1 <- lm(log10(rRNA) ~ d1_up*log10(tRNA), data = tran2)
> #summary(mod2.1)
> 
> #mod3.lm <- lm(log10(rRNA) ~ log10(volume), data = tran.dat)
> #summary(mod3.lm)
> 
> #mod3.1.lm <- lm(log10(rRNA) ~ d1_up, data = tran2)
> #summary(mod3.1.lm)
> 
> #mod3.2.lm <- lm(log10(tRNA) ~ d1_up, data = tran2)
> #summary(mod3.2.lm)
> 
> #mod4.lm <- lm(log10(tRNA) ~ log10(volume), data = tran.dat)
> #summary(mod4.lm)
> 
> mod.gr1 <- lm(log10(rRNA) ~ log10(doubling_h), data = tran3)
> #summary(mod.gr1)
> 
> mod.gr2 <- lm(log10(tRNA) ~ log10(doubling_h), data = tran3)
> #summary(mod.gr2)
> 
> 
> 
> 
> #mod2.pg <- gls(log10(rRNA) ~ log10(volume)*log10(tRNA), correlation = corBrownian(phy = tree.tran, form = ~species), data = tran.dat, method = "ML")
> #summary(mod2.pg)
> 
> #mod2.gr.pg <- gls(log10(rRNA) ~ log10(doubling_h) + log10(doubling_h):log10(tRNA), correlation = corBrownian(phy = tree.tran3, form = ~species), data = tran.dat3, method = "ML")
> #summary(mod2.gr.pg)
> 
> #mod2.gr <- lm(rRNA ~ log10(doubling_h) + log10(doubling_h):log10(tRNA), data = tran3)
> #summary(mod2.gr)
> 
> #mod3 <- gls(log10(rRNA) ~ log10(doubling_h), correlation = corBrownian(phy = tree.tran3, form = ~species), data = tran.dat3, method = "ML")
> #summary(mod3)
> 
> #mod4 <- gls(log10(tRNA) ~ log10(doubling_h), correlation = corBrownian(phy = tree.tran3, form = ~species), data = tran.dat3, method = "ML")
> #summary(mod4)
> 
> 
> SSX <- sum(round((log10(tran.dat$volume) - mean(log10(tran.dat$volume)))^2), 2)
> s2 <- var(log10(tran.dat$rRNA))
> n <- length(tran.dat$rRNA)
> x <- seq(min(log10(tran.dat$volume)), max(log10(tran.dat$volume)), length = length(tran.dat$species))
> m.x <- mean(round(log(tran.dat$volume), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(mod3)[1] + coef(mod3)[2]*x) + ic.s
Error: object 'mod3' not found
> lower.i <- (coef(mod3)[1] + coef(mod3)[2]*x) + ic.i
Error: object 'mod3' not found
> 
> quartz()
> cols2 <- setNames(c("purple", "orange"), levels(as.factor(tran.dat$kingdom)))
> 
> plot(log10(rRNA) ~ log10(doubling_h), data = tran.dat3, type = "n", pch = 16, las = 1, ylab = expression(log[10]~rRNA~genes), xlab = expression(paste("Cell volume ", log[10], sep = " ")(mu*m^3)))
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(rRNA) ~ log10(doubling_h), data = tran.dat3, type = "p", pch = 16, col = cols2[tran.dat3$kingdom], bg = cols2[tran.dat3$kingdom], las = 1, axes = FALSE, xaxt = "n", ylab = "", xlab = "")
> lines(x = x, y = (coef(mod3)[1] + coef(mod3)[2]*x), lwd = 2)
Error: object 'mod3' not found
> SSX <- sum(round((log10(tran3$doubling_h) - mean(log10(tran3$doubling_h)))^2), 2)
> s2 <- var(log10(tran3$rRNA))
> n <- length(tran3$rRNA)
> x <- seq(min(log10(tran3$doubling_h)), max(log10(tran3$doubling_h)), length = length(tran3$species))
> m.x <- mean(round(log(tran3$doubling_h), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(mod.gr1)[1] + coef(mod.gr1)[2]*x) + ic.s
> lower.i <- (coef(mod.gr1)[1] + coef(mod.gr1)[2]*x) + ic.i
> 
> 
> cols2 <- setNames(c("purple", "orange"), levels(as.factor(tran3$kingdom)))
> 
> par(mar = c(5, 4, 1.5, 3.3))
> 
> plot(log10(rRNA) ~ log10(doubling_h), data = tran3, type = "n", pch = 16, las = 1, ylab = expression(log[10]~rRNA~genes), xlab = expression(paste("Doubling ", log[10], sep = " ")(h)))
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(rRNA) ~ log10(doubling_h), data = tran3, type = "p", pch = 16, col = cols2[tran3$kingdom], bg = cols2[tran3$kingdom], las = 1, axes = FALSE, xaxt = "n", ylab = "", xlab = "")
> 
> lines(x = x, y = (coef(mod.gr1)[1] + coef(mod.gr1)[2]*x), lwd = 2)
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> 
> SSX <- sum(round((log10(tran3$doubling_h) - mean(log10(tran3$doubling_h)))^2), 2)
> s2 <- var(log10(tran3$tRNA))
> n <- length(tran3$tRNA)
> x <- seq(min(log10(tran3$doubling_h)), max(log10(tran3$doubling_h)), length = length(tran3$species))
> m.x <- mean(round(log(tran3$doubling_h), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(mod.gr2)[1] + coef(mod.gr2)[2]*x) + ic.s
> lower.i <- (coef(mod.gr2)[1] + coef(mod.gr2)[2]*x) + ic.i
> 
> cols2 <- setNames(c("purple", "orange"), levels(as.factor(tran3$kingdom)))
> 
> #plot(log10(tRNA) ~ log10(doubling_h), data = tran3, type = "n", pch = 16, las = 1, ylab = expression(log[10]~tRNA~genes), xlab = expression(paste("Doubling ", log[10], sep = " ")(h)))
> 
> #grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(tRNA) ~ log10(doubling_h), data = tran3, type = "p", pch = 8, col = cols2[tran3$kingdom], bg = cols2[tran3$kingdom], las = 1, axes = FALSE, xaxt = "n", ylab = "", xlab = "")
> 
> lines(x = x, y = (coef(mod.gr2)[1] + coef(mod.gr2)[2]*x), lwd = 2, lty = 2)
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> axis(side = 4, at = pretty(range(log10(tran3$tRNA))), las = 1)
> mtext(expression(log[10]~tRNA~genes), side = 4, line = 2.3)
> 
> legend("topright", legend = c("Archaea", "Bacteria"), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 1)
> legend(x = 1.7, y = 2.18, legend = "tRNA genes", lty = 2, lwd = 2, bty = "n")
> obj <- rep()
> for(i in d1_up$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> d1_up$kingdom <- obj
> head(d1_up)
                            species d1_up  kingdom
1           [Clostridium] aldenense   1.1 Bacteria
2           [Clostridium] caenicola   0.6 Bacteria
3          [Clostridium] fimetarium   0.6 Bacteria
4           [Clostridium] lavalense   1.5 Bacteria
5           [Clostridium] paradoxum   1.1 Bacteria
6 [Clostridium] polysaccharolyticum   1.1 Bacteria
> 
> d1_up$species <- gsub("[[:punct:]]", "", d1_up$species)
> d1_up$species <- gsub(" ", "_", d1_up$species)
> rownames(d1_up) <- d1_up$species
> dim(d1_up)
[1] 1603    3
> head(d1_up)
                                                        species d1_up  kingdom
Clostridium_aldenense                     Clostridium_aldenense   1.1 Bacteria
Clostridium_caenicola                     Clostridium_caenicola   0.6 Bacteria
Clostridium_fimetarium                   Clostridium_fimetarium   0.6 Bacteria
Clostridium_lavalense                     Clostridium_lavalense   1.5 Bacteria
Clostridium_paradoxum                     Clostridium_paradoxum   1.1 Bacteria
Clostridium_polysaccharolyticum Clostridium_polysaccharolyticum   1.1 Bacteria
> 
> size <- lm(d1_up ~ kingdom, data = d1_up)
> summary(size)

Call:
lm(formula = d1_up ~ kingdom, data = d1_up)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.1242 -0.3039 -0.1039  0.0961  9.0961 

Coefficients:
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)      1.27418    0.04908  25.959  < 2e-16 ***
kingdomBacteria -0.37031    0.05247  -7.058 2.51e-12 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.6942 on 1601 degrees of freedom
Multiple R-squared:  0.03018,	Adjusted R-squared:  0.02957 
F-statistic: 49.82 on 1 and 1601 DF,  p-value: 2.507e-12

> 
> ## Basic boxplot
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = expression(paste("Cell size")~mu*m~(log[10])), xlab = "Kingdom", col = "white", las = 1)
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = "", xlab = "", col = c(alpha("red", 0.2), alpha("purple", 0.2)), las = 1)
> 
> segments(x0 = 1, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), x1 = 1.311, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), lwd = 2, lty = 2, col = "blue")
> text(x = 1.4, y = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), expression(mu))
> 
> segments(x0 = 2, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), x1 = 2.4, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), lwd = 2, lty = 2, col = "blue")
> text(x = 2.45, y = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), expression(mu))
> 
> text(x = 0.6, y = 9.8, paste("n =", length(d1_up$species), sep = " "))
> 
> #mean(d1_up$d1_up[d1_up$kingdom == "Archaea"])
> #mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"])
> 
> ##stripchart(d1_up ~ kingdom, vertical = TRUE, data = d1_up, method = "jitter", add = TRUE, pch = 20, col = c(alpha("red", 0.3), alpha("purple", 0.5)))
> obj <- rep()
> for(i in doubling$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> doubling$kingdom <- obj
> head(doubling)
                             species doubling_h  kingdom
1              [Bacillus] caldotenax       0.24 Bacteria
2 [Butyribacterium] methylotrophicum      20.00 Bacteria
3      [Clostridium] alkalicellulosi      14.00 Bacteria
4            [Clostridium] paradoxum       0.67 Bacteria
5         [Clostridium] stercorarium       8.60 Bacteria
6           [Clostridium] termitidis       9.62 Bacteria
> 
> doubling$species <- gsub("[[:punct:]]", "", doubling$species)
> doubling$species <- gsub(" ", "_", doubling$species)
> rownames(doubling) <- doubling$species
> dim(doubling)
[1] 928   3
> head(doubling)
                                                          species doubling_h
Bacillus_caldotenax                           Bacillus_caldotenax       0.24
Butyribacterium_methylotrophicum Butyribacterium_methylotrophicum      20.00
Clostridium_alkalicellulosi           Clostridium_alkalicellulosi      14.00
Clostridium_paradoxum                       Clostridium_paradoxum       0.67
Clostridium_stercorarium                 Clostridium_stercorarium       8.60
Clostridium_termitidis                     Clostridium_termitidis       9.62
                                  kingdom
Bacillus_caldotenax              Bacteria
Butyribacterium_methylotrophicum Bacteria
Clostridium_alkalicellulosi      Bacteria
Clostridium_paradoxum            Bacteria
Clostridium_stercorarium         Bacteria
Clostridium_termitidis           Bacteria
> 
> growth <- lm(doubling_h ~ kingdom, data = doubling)
> summary(growth)

Call:
lm(formula = doubling_h ~ kingdom, data = doubling)

Residuals:
   Min     1Q Median     3Q    Max 
-13.64 -10.87  -8.89  -1.36 421.12 

Coefficients:
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)       13.867      2.071   6.695 3.75e-11 ***
kingdomBacteria   -1.981      2.380  -0.832    0.405    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 31.07 on 926 degrees of freedom
Multiple R-squared:  0.0007477,	Adjusted R-squared:  -0.0003314 
F-statistic: 0.6929 on 1 and 926 DF,  p-value: 0.4054

> 
> ## Basic boxplot
> 
> vioplot(log(doubling_h) ~ kingdom, data = doubling, border = NA, method = "jitter", side = "right", ylab = "Doubling h (log)", xlab = "Kingdom", col = "white", las = 1)
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> vioplot(log(doubling_h) ~ kingdom, data = doubling, border = NA, method = "jitter", side = "right", ylab = "", xlab = "", col = c(alpha("red", 0.2), alpha("purple", 0.2)), las = 1)
> 
> segments(x0 = 1, y0 = mean(log(doubling$doubling_h)[doubling$kingdom == "Archaea"]), x1 = 1.4, y1 = mean(log(doubling$doubling_h)[doubling$kingdom == "Archaea"]), lwd = 2, lty = 2, col = "blue")
> text(x = 1.45, y = mean(log(doubling$doubling_h)[doubling$kingdom == "Archaea"]), expression(mu))
> 
> segments(x0 = 2, y0 = mean(log(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), x1 = 2.39, y1 = mean(log(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), lwd = 2, lty = 2, col = "blue")
> text(x = 2.45, y = mean(log(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), expression(mu))
> 
> text(x = 0.6, y = 5.8, paste("n =", length(doubling$species), sep = " "))
> 
> d1_up <- aggregate(spp.d1_up$d1_up, by = list(spp.d1_up$species), mean, na.action = na.rm)
> cell.vol <- aggregate(vol$volume, by = list(vol$species), mean)
> 
> #dim(d1_up)
> names(d1_up) <- c("species", "d1_up")
> #dim(cell.vol)
> names(cell.vol) <- c("species", "volume")
> 
> 
> d1_up$species <- gsub("[[:punct:]]", "", d1_up$species)
> d1_up$species <- gsub(" ", "_", d1_up$species)
> cell.vol$species <- gsub(" ", "_", cell.vol$species)
> 
> di.vol <- merge(cell.vol, d1_up, by = "species")
> 
> ##cor(log10(di.vol$volume), di.vol$d1_up, method = c("pearson"))
> p.cor <- cor.test(log10(di.vol$volume), di.vol$d1_up, method = "pearson")
> 
> 
> ##png("figure3.png", height = 7, width = 7, units = "in", res = 360)
> 
> 
> plot(log10(volume) ~ d1_up, data = di.vol, pch = 16, las = 1, ylab = expression(paste("Cell volume ", log[10], sep = " ")(mu*m^3)), xlab = expression(paste("Cell diameter ", log[10], sep = " ")(mu*m)), mgp = c(2.6, 1, 0), type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(volume) ~ d1_up, data = di.vol, pch = 16, las = 1, ylab = "", xlab = "", mgp = c(2.6, 1, 0), type = "p", axes = FALSE)
> 
> 
> abline(lm(log10(di.vol$volume) ~ di.vol$d1_up), lwd = 2)
> legend(x = 0.1, y = 2.3, legend = expression("R"^2==~0.877), bty = "n")
> legend(x = 0.1, y = 2.06, legend = expression(p==~0.001), bty = "n")
> #legend(x = 0.2, y = 2.3, legend = paste("=", round((cor(log(di.vol$volume), di.vol$d1_up, method = "pearson"))^2, 2), sep = " "), bty = "n")
> obj <- rep()
> for(i in d1_up$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> d1_up$kingdom <- obj
Error in `$<-.data.frame`(`*tmp*`, kingdom, value = character(0)) : 
  replacement has 0 rows, data has 1603
> head(d1_up)
                          species d1_up
1           Clostridium_aldenense   1.1
2           Clostridium_caenicola   0.6
3          Clostridium_fimetarium   0.6
4           Clostridium_lavalense   1.5
5           Clostridium_paradoxum   1.1
6 Clostridium_polysaccharolyticum   1.1
> 
> d1_up$species <- gsub("[[:punct:]]", "", d1_up$species)
> d1_up$species <- gsub(" ", "_", d1_up$species)
> rownames(d1_up) <- d1_up$species
> dim(d1_up)
[1] 1603    2
> head(d1_up)
                                                      species d1_up
Clostridiumaldenense                     Clostridiumaldenense   1.1
Clostridiumcaenicola                     Clostridiumcaenicola   0.6
Clostridiumfimetarium                   Clostridiumfimetarium   0.6
Clostridiumlavalense                     Clostridiumlavalense   1.5
Clostridiumparadoxum                     Clostridiumparadoxum   1.1
Clostridiumpolysaccharolyticum Clostridiumpolysaccharolyticum   1.1
> 
> d1_up <- d1_up[d1_up$d1_up < 6, ]
> 
> size <- lm(d1_up ~ kingdom, data = d1_up)
Error in model.frame.default(formula = d1_up ~ kingdom, data = d1_up,  : 
  variable lengths differ (found for 'kingdom')
> summary(size)

Call:
lm(formula = d1_up ~ kingdom, data = d1_up)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.1242 -0.3039 -0.1039  0.0961  9.0961 

Coefficients:
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)      1.27418    0.04908  25.959  < 2e-16 ***
kingdomBacteria -0.37031    0.05247  -7.058 2.51e-12 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.6942 on 1601 degrees of freedom
Multiple R-squared:  0.03018,	Adjusted R-squared:  0.02957 
F-statistic: 49.82 on 1 and 1601 DF,  p-value: 2.507e-12

> 
> 
> 
> layout(matrix(c(0, 0, 0, 0,
+                  1, 1, 2, 2,
+                  1, 1, 2, 2,
+                  0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE))
> 
> ## Basic boxplot
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = expression(paste("Cell size")~log[10]~(mu*m)), xlab = "Kingdom", col = "white", las = 1)
Error in stats::model.frame.default(formula = d1_up ~ kingdom, data = d1_up) : 
  variable lengths differ (found for 'kingdom')
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = "", xlab = "", col = c(alpha("purple", 0.2), alpha("orange", 0.2)), las = 1)
Error in stats::model.frame.default(formula = d1_up ~ kingdom, data = d1_up) : 
  variable lengths differ (found for 'kingdom')
> 
> segments(x0 = 1, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), x1 = 1.311, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), lwd = 2, lty = 2, col = "black")
> text(x = 1.4, y = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), expression(mu))
> 
> segments(x0 = 2, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), x1 = 2.4, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), lwd = 2, lty = 2, col = "black")
> text(x = 2.45, y = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), expression(mu))
> 
> text(x = 0.65, y = 5.1, paste("n =", length(d1_up$species), sep = " "))
> 
> #mean(d1_up$d1_up[d1_up$kingdom == "Archaea"])
> #mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"])
> 
> stripchart(d1_up ~ kingdom, vertical = TRUE, data = d1_up, method = "jitter", add = TRUE, pch = 20, col = c(alpha("purple", 0.3), alpha("orange", 0.5)))
Error in model.frame.default(data = d1_up, formula = d1_up ~ kingdom) : 
  variable lengths differ (found for 'kingdom')
> 
> mtext("B", side = 2, at = 6.1, line = 3, las = 1)
> obj <- rep()
> for(i in doubling$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> doubling$kingdom <- obj
Error in `$<-.data.frame`(`*tmp*`, kingdom, value = character(0)) : 
  replacement has 0 rows, data has 928
> head(doubling)
                                                          species doubling_h
Bacillus_caldotenax                           Bacillus_caldotenax       0.24
Butyribacterium_methylotrophicum Butyribacterium_methylotrophicum      20.00
Clostridium_alkalicellulosi           Clostridium_alkalicellulosi      14.00
Clostridium_paradoxum                       Clostridium_paradoxum       0.67
Clostridium_stercorarium                 Clostridium_stercorarium       8.60
Clostridium_termitidis                     Clostridium_termitidis       9.62
                                  kingdom
Bacillus_caldotenax              Bacteria
Butyribacterium_methylotrophicum Bacteria
Clostridium_alkalicellulosi      Bacteria
Clostridium_paradoxum            Bacteria
Clostridium_stercorarium         Bacteria
Clostridium_termitidis           Bacteria
> 
> doubling$species <- gsub("[[:punct:]]", "", doubling$species)
> doubling$species <- gsub(" ", "_", doubling$species)
> rownames(doubling) <- doubling$species
> dim(doubling)
[1] 928   3
> head(doubling)
                                                        species doubling_h
Bacilluscaldotenax                           Bacilluscaldotenax       0.24
Butyribacteriummethylotrophicum Butyribacteriummethylotrophicum      20.00
Clostridiumalkalicellulosi           Clostridiumalkalicellulosi      14.00
Clostridiumparadoxum                       Clostridiumparadoxum       0.67
Clostridiumstercorarium                 Clostridiumstercorarium       8.60
Clostridiumtermitidis                     Clostridiumtermitidis       9.62
                                 kingdom
Bacilluscaldotenax              Bacteria
Butyribacteriummethylotrophicum Bacteria
Clostridiumalkalicellulosi      Bacteria
Clostridiumparadoxum            Bacteria
Clostridiumstercorarium         Bacteria
Clostridiumtermitidis           Bacteria
> 
> growth <- lm(doubling_h ~ kingdom, data = doubling)
> summary(growth)

Call:
lm(formula = doubling_h ~ kingdom, data = doubling)

Residuals:
   Min     1Q Median     3Q    Max 
-13.64 -10.87  -8.89  -1.36 421.12 

Coefficients:
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)       13.867      2.071   6.695 3.75e-11 ***
kingdomBacteria   -1.981      2.380  -0.832    0.405    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 31.07 on 926 degrees of freedom
Multiple R-squared:  0.0007477,	Adjusted R-squared:  -0.0003314 
F-statistic: 0.6929 on 1 and 926 DF,  p-value: 0.4054

> 
> png("figure5.png", height = 7, width = 7, units = "in", res = 360)
> 
> layout(matrix(c(0, 0, 0, 0,
+                  1, 1, 2, 2,
+                  1, 1, 2, 2,
+                  0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE))
> 
> ## Basic boxplot
> 
> vioplot(log10(doubling_h) ~ kingdom, data = doubling, border = NA, method = "jitter", side = "right", ylab = expression(paste("Doubling")~log[10]~(h)), xlab = "Kingdom", col = "white", las = 1)
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> vioplot(log10(doubling_h) ~ kingdom, data = doubling, border = NA, method = "jitter", side = "right", ylab = "", xlab = "", col = c(alpha("purple", 0.2), alpha("orange", 0.2)), las = 1)
> 
> segments(x0 = 1, y0 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Archaea"]), x1 = 1.4, y1 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Archaea"]), lwd = 2, lty = 2, col = "black")
> text(x = 1.45, y = mean(log10(doubling$doubling_h)[doubling$kingdom == "Archaea"]), expression(mu))
> 
> segments(x0 = 2, y0 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), x1 = 2.39, y1 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), lwd = 2, lty = 2, col = "black")
> text(x = 2.45, y = mean(log10(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), expression(mu))
> 
> text(x = 0.65, y = 2.5, paste("n =", length(doubling$species), sep = " "), cex = 1.1)
> 
> #mean(doubling$doubling[doubling$kingdom == "Archaea"])
> #mean(doubling$doubling[doubling$kingdom == "Bacteria"])
> 
> stripchart(log10(doubling_h) ~ kingdom, vertical = TRUE, data = doubling, method = "jitter", add = TRUE, pch = 20, col = c(alpha("purple", 0.3), alpha("orange", 0.5)), cex = 1.3)
> 
> mtext("A", side = 2, at = 3, line = 3, las = 1, font = 2)
> 
> ## Basic boxplot
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = expression(paste("Cell size")~log[10]~(mu*m)), xlab = "Kingdom", col = "white", las = 1)
Error in stats::model.frame.default(formula = d1_up ~ kingdom, data = d1_up) : 
  variable lengths differ (found for 'kingdom')
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = "", xlab = "", col = c(alpha("purple", 0.2), alpha("orange", 0.2)), las = 1)
Error in stats::model.frame.default(formula = d1_up ~ kingdom, data = d1_up) : 
  variable lengths differ (found for 'kingdom')
> 
> segments(x0 = 1, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), x1 = 1.311, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), lwd = 2, lty = 2, col = "black")
> text(x = 1.4, y = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), expression(mu))
> 
> segments(x0 = 2, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), x1 = 2.4, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), lwd = 2, lty = 2, col = "black")
> text(x = 2.45, y = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), expression(mu))
> 
> text(x = 0.65, y = 5.3, paste("n =", length(d1_up$species), sep = " "), cex = 1.1)
> 
> #mean(d1_up$d1_up[d1_up$kingdom == "Archaea"])
> #mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"])
> 
> stripchart(d1_up ~ kingdom, vertical = TRUE, data = d1_up, method = "jitter", add = TRUE, pch = 20, col = c(alpha("purple", 0.3), alpha("orange", 0.5)), cex = 1.3)
Error in model.frame.default(data = d1_up, formula = d1_up ~ kingdom) : 
  variable lengths differ (found for 'kingdom')
> 
> mtext("B", side = 2, at = 6, line = 3, las = 1, font = 2)
> 
> 
> 
> dev.off()
quartz 
     2 
> layout(matrix(c(0, 0, 0, 0,
+                  1, 1, 2, 2,
+                  1, 1, 2, 2,
+                  0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE))
> 
> ## Basic boxplot
> 
> vioplot(log10(doubling_h) ~ kingdom, data = doubling, border = NA, method = "jitter", side = "right", ylab = expression(paste("Doubling")~log[10]~(h)), xlab = "Kingdom", col = "white", las = 1)
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> vioplot(log10(doubling_h) ~ kingdom, data = doubling, border = NA, method = "jitter", side = "right", ylab = "", xlab = "", col = c(alpha("purple", 0.2), alpha("orange", 0.2)), las = 1)
> 
> segments(x0 = 1, y0 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Archaea"]), x1 = 1.4, y1 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Archaea"]), lwd = 2, lty = 2, col = "black")
> text(x = 1.45, y = mean(log10(doubling$doubling_h)[doubling$kingdom == "Archaea"]), expression(mu))
> 
> segments(x0 = 2, y0 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), x1 = 2.39, y1 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), lwd = 2, lty = 2, col = "black")
> text(x = 2.45, y = mean(log10(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), expression(mu))
> 
> text(x = 0.65, y = 2.5, paste("n =", length(doubling$species), sep = " "), cex = 1.1)
> 
> #mean(doubling$doubling[doubling$kingdom == "Archaea"])
> #mean(doubling$doubling[doubling$kingdom == "Bacteria"])
> 
> stripchart(log10(doubling_h) ~ kingdom, vertical = TRUE, data = doubling, method = "jitter", add = TRUE, pch = 20, col = c(alpha("purple", 0.3), alpha("orange", 0.5)), cex = 1.3)
> 
> mtext("A", side = 2, at = 3, line = 3, las = 1, font = 2)
> 
> 
> ## Basic boxplot
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = expression(paste("Cell size")~log[10]~(mu*m)), xlab = "Kingdom", col = "white", las = 1)
Error in stats::model.frame.default(formula = d1_up ~ kingdom, data = d1_up) : 
  variable lengths differ (found for 'kingdom')
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = "", xlab = "", col = c(alpha("purple", 0.2), alpha("orange", 0.2)), las = 1)
Error in stats::model.frame.default(formula = d1_up ~ kingdom, data = d1_up) : 
  variable lengths differ (found for 'kingdom')
> 
> segments(x0 = 1, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), x1 = 1.311, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), lwd = 2, lty = 2, col = "black")
> text(x = 1.4, y = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), expression(mu))
> 
> segments(x0 = 2, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), x1 = 2.4, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), lwd = 2, lty = 2, col = "black")
> text(x = 2.45, y = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), expression(mu))
> 
> text(x = 0.65, y = 5.3, paste("n =", length(d1_up$species), sep = " "), cex = 1.1)
> 
> #mean(d1_up$d1_up[d1_up$kingdom == "Archaea"])
> #mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"])
> 
> stripchart(d1_up ~ kingdom, vertical = TRUE, data = d1_up, method = "jitter", add = TRUE, pch = 20, col = c(alpha("purple", 0.3), alpha("orange", 0.5)), cex = 1.3)
Error in model.frame.default(data = d1_up, formula = d1_up ~ kingdom) : 
  variable lengths differ (found for 'kingdom')
> 
> mtext("B", side = 2, at = 6, line = 3, las = 1, font = 2)
> head(d1_up)
                                                      species d1_up
Clostridiumaldenense                     Clostridiumaldenense   1.1
Clostridiumcaenicola                     Clostridiumcaenicola   0.6
Clostridiumfimetarium                   Clostridiumfimetarium   0.6
Clostridiumlavalense                     Clostridiumlavalense   1.5
Clostridiumparadoxum                     Clostridiumparadoxum   1.1
Clostridiumpolysaccharolyticum Clostridiumpolysaccharolyticum   1.1
> d1_up$species <- gsub("[[:punct:]]", "", d1_up$species)
> d1_up$species <- gsub(" ", "_", d1_up$species)
> rownames(d1_up) <- d1_up$species
> dim(d1_up)
[1] 1596    2
> head(d1_up)
                                                      species d1_up
Clostridiumaldenense                     Clostridiumaldenense   1.1
Clostridiumcaenicola                     Clostridiumcaenicola   0.6
Clostridiumfimetarium                   Clostridiumfimetarium   0.6
Clostridiumlavalense                     Clostridiumlavalense   1.5
Clostridiumparadoxum                     Clostridiumparadoxum   1.1
Clostridiumpolysaccharolyticum Clostridiumpolysaccharolyticum   1.1
> d1_up <- d1_up[d1_up$d1_up < 6, ]
> size <- lm(d1_up ~ kingdom, data = d1_up)
Error in model.frame.default(formula = d1_up ~ kingdom, data = d1_up,  : 
  variable lengths differ (found for 'kingdom')
> summary(size)

Call:
lm(formula = d1_up ~ kingdom, data = d1_up)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.1242 -0.3039 -0.1039  0.0961  9.0961 

Coefficients:
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)      1.27418    0.04908  25.959  < 2e-16 ***
kingdomBacteria -0.37031    0.05247  -7.058 2.51e-12 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.6942 on 1601 degrees of freedom
Multiple R-squared:  0.03018,	Adjusted R-squared:  0.02957 
F-statistic: 49.82 on 1 and 1601 DF,  p-value: 2.507e-12

> head(d1_up)
                                                      species d1_up
Clostridiumaldenense                     Clostridiumaldenense   1.1
Clostridiumcaenicola                     Clostridiumcaenicola   0.6
Clostridiumfimetarium                   Clostridiumfimetarium   0.6
Clostridiumlavalense                     Clostridiumlavalense   1.5
Clostridiumparadoxum                     Clostridiumparadoxum   1.1
Clostridiumpolysaccharolyticum Clostridiumpolysaccharolyticum   1.1
> head(d1_up)
                                                      species d1_up
Clostridiumaldenense                     Clostridiumaldenense   1.1
Clostridiumcaenicola                     Clostridiumcaenicola   0.6
Clostridiumfimetarium                   Clostridiumfimetarium   0.6
Clostridiumlavalense                     Clostridiumlavalense   1.5
Clostridiumparadoxum                     Clostridiumparadoxum   1.1
Clostridiumpolysaccharolyticum Clostridiumpolysaccharolyticum   1.1
> d1_up <- d1_up[d1_up$d1_up < 6, ]
> size <- lm(d1_up ~ kingdom, data = d1_up)
Error in model.frame.default(formula = d1_up ~ kingdom, data = d1_up,  : 
  variable lengths differ (found for 'kingdom')
> obj <- rep()
> for(i in d1_up$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> d1_up$kingdom <- obj
Error in `$<-.data.frame`(`*tmp*`, kingdom, value = character(0)) : 
  replacement has 0 rows, data has 1596
> obj <- rep()
> for(i in d1_up$species){
+     kingdom <- unique(data$superkingdom[data$species == i])[1]
+     obj <- c(obj, kingdom)
+ }
> d1_up$kingdom <- obj
> head(d1_up)
                                                      species d1_up kingdom
Clostridiumaldenense                     Clostridiumaldenense   1.1    <NA>
Clostridiumcaenicola                     Clostridiumcaenicola   0.6    <NA>
Clostridiumfimetarium                   Clostridiumfimetarium   0.6    <NA>
Clostridiumlavalense                     Clostridiumlavalense   1.5    <NA>
Clostridiumparadoxum                     Clostridiumparadoxum   1.1    <NA>
Clostridiumpolysaccharolyticum Clostridiumpolysaccharolyticum   1.1    <NA>
> obj <- rep()
> for(i in d1_up$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> d1_up$kingdom <- obj
Error in `$<-.data.frame`(`*tmp*`, kingdom, value = character(0)) : 
  replacement has 0 rows, data has 1596
> obj <- rep()
> for(i in d1_up$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> d1_up$kingdom <- obj
Error in `$<-.data.frame`(`*tmp*`, kingdom, value = character(0)) : 
  replacement has 0 rows, data has 1596
> head(d1_up)
                                                      species d1_up kingdom
Clostridiumaldenense                     Clostridiumaldenense   1.1    <NA>
Clostridiumcaenicola                     Clostridiumcaenicola   0.6    <NA>
Clostridiumfimetarium                   Clostridiumfimetarium   0.6    <NA>
Clostridiumlavalense                     Clostridiumlavalense   1.5    <NA>
Clostridiumparadoxum                     Clostridiumparadoxum   1.1    <NA>
Clostridiumpolysaccharolyticum Clostridiumpolysaccharolyticum   1.1    <NA>
> d1_up$species <- gsub("[[:punct:]]", "", d1_up$species)
> q()
Save workspace image? [y/n/c]: n

Process R finished at Fri Mar 15 22:13:26 2024


R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd('/Users/dpadil10/Dropbox (ASU)/BIO598-Evo-cell/project/data_analysis/presentation/manuscript_growth-and-size-prokaryotes/data_analysis/')
> library(ape)
> library(geiger)
Loading required package: phytools
Loading required package: maps
> library(phytools)
> library(phylolm)
> library(lattice)
> library(nlme)
> library(raster)
Loading required package: sp

Attaching package: ‘raster’

The following object is masked from ‘package:nlme’:

    getData

The following object is masked from ‘package:geiger’:

    hdr

> library(rphylopic)
You are using rphylopic v.1.3.0. Please remember to credit PhyloPic contributors (hint: `get_attribution()`) and cite rphylopic in your work (hint: `citation("rphylopic")`).
> library(scales)

Attaching package: ‘scales’

The following object is masked from ‘package:phytools’:

    rescale

> library(vioplot)
Loading required package: sm
Package 'sm', version 2.2-5.7: type help(sm) for summary information
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> 
> 
> sessionInfo()
R version 4.3.2 (2023-10-31)
Platform: x86_64-apple-darwin20 (64-bit)
Running under: macOS Sonoma 14.2.1

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib 
LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: America/Phoenix
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] vioplot_0.4.0   zoo_1.8-12      sm_2.2-5.7.1    scales_1.3.0   
 [5] rphylopic_1.3.0 raster_3.6-26   sp_2.1-3        nlme_3.1-164   
 [9] lattice_0.21-9  phylolm_2.6.2   geiger_2.0.11   phytools_2.1-1 
[13] maps_3.4.2      ape_5.7-1      

loaded via a namespace (and not attached):
 [1] fastmatch_1.1-4         gtable_0.3.4            xfun_0.42              
 [4] ggplot2_3.4.4           grImport2_0.3-1         numDeriv_2016.8-1.1    
 [7] quadprog_1.5-8          vctrs_0.6.5             tools_4.3.2            
[10] generics_0.1.3          curl_5.2.0              parallel_4.3.2         
[13] tibble_3.2.1            fansi_1.0.6             pkgconfig_2.0.3        
[16] Matrix_1.6-1.1          scatterplot3d_0.3-44    lifecycle_1.0.4        
[19] compiler_4.3.2          munsell_0.5.0           mnormt_2.1.1           
[22] subplex_1.8             combinat_0.0-8          terra_1.7-71           
[25] codetools_0.2-19        pillar_1.9.0            MASS_7.3-60            
[28] clusterGeneration_1.3.8 iterators_1.0.14        foreach_1.5.2          
[31] parallelly_1.36.0       phangorn_2.11.1         tidyselect_1.2.0       
[34] digest_0.6.34           mvtnorm_1.2-4           future_1.33.1          
[37] dplyr_1.1.4             listenv_0.9.0           rsvg_2.6.0             
[40] grid_4.3.2              colorspace_2.1-0        expm_0.999-9           
[43] cli_3.6.2               magrittr_2.0.3          base64enc_0.1-3        
[46] XML_3.99-0.16           optimParallel_1.0-2     utf8_1.2.4             
[49] future.apply_1.11.1     httr_1.4.7              globals_0.16.2         
[52] jpeg_0.1-10             igraph_1.6.0            deSolve_1.40           
[55] png_0.1-8               pbapply_1.7-2           coda_0.19-4            
[58] knitr_1.45              doParallel_1.0.17       rlang_1.1.3            
[61] Rcpp_1.0.12             glue_1.7.0              jsonlite_1.8.8         
[64] R6_2.5.1               
> tree <- read.tree("spp.tree.nwk")
> 
> data <- read.csv("condensed_traits_NCBI.csv")
> 
> 
> vol <- read.csv("cell_volume.csv")
> str(vol)
'data.frame':	52 obs. of  3 variables:
 $ species  : chr  "Arthrobacter sp. FB24" "Bacillus subtilis" "Bdellovibrio bacteriovorus" "Clostridium cellulolyticum" ...
 $ volume   : num  0.502 0.9 0.098 0.159 1.145 ...
 $ reference: chr  "https://genome.jgi.doe.gov/portal/art_f/art_f.home.html; Lynch et al., 2022. Evolutionary scaling of maximum gr"| __truncated__ "Jeong et al. (1990, Biotech. Bioeng.), Page 80." "Stolp and Starr (1963, Ant. Von Leeuwenhoek); Gadkari and Stolp (1976, Arch. Microbiol.)" "Desvaux et al. (2001, J. Bacteriol.)" ...
> head(vol)
                     species volume
1      Arthrobacter sp. FB24 0.5025
2          Bacillus subtilis 0.9000
3 Bdellovibrio bacteriovorus 0.0980
4 Clostridium cellulolyticum 0.1590
5         Clostridium tetani 1.1454
6        Cupriavidus necator 2.5080
                                                                                                                                    reference
1 https://genome.jgi.doe.gov/portal/art_f/art_f.home.html; Lynch et al., 2022. Evolutionary scaling of maximum growth rate with organism size
2                                                                                             Jeong et al. (1990, Biotech. Bioeng.), Page 80.
3                                                    Stolp and Starr (1963, Ant. Von Leeuwenhoek); Gadkari and Stolp (1976, Arch. Microbiol.)
4                                                                                                        Desvaux et al. (2001, J. Bacteriol.)
5                                                                                   Brenet and Winet (1977, Ann. Rev. Fluid Mech.), Table 1. 
6                                                                            Pedros-Alio et al. (1985, Arch. Microbiol.), Abstract, Page 181.
> 
> spp.d1_lo <- data[!is.na(data$d1_lo), ]
> spp.d1_up <- data[!is.na(data$d1_up), ]
> spp.doubling <- data[!is.na(data$doubling_h), ]
> spp.rRNA <- data[!is.na(data$rRNA16S_genes), ]
> spp.tRNA <- data[!is.na(data$tRNA_genes), ]
> 
> 
> tRNA <- aggregate(spp.tRNA$tRNA_genes, by = list(spp.tRNA$species), mean, na.action = na.rm)
> rRNA <- aggregate(spp.rRNA$rRNA16S_genes, by = list(spp.rRNA$species), mean, na.action = na.rm)
> d1_up <- aggregate(spp.d1_up$d1_up, by = list(spp.d1_up$species), mean, na.action = na.rm)
> d1_lo <- aggregate(spp.d1_lo$d1_lo, by = list(spp.d1_lo$species), mean, na.action = na.rm)
> doubling <- aggregate(spp.doubling$doubling_h, by = list(spp.doubling$species), mean, na.action = na.rm)
> cell.vol <- aggregate(vol$volume, by = list(vol$species), mean)
> str(cell.vol)
'data.frame':	48 obs. of  2 variables:
 $ Group.1: chr  "Aeropyrum pernix" "Anabaena cylindrica" "Arthrobacter sp. FB24" "Azotobacter chroococcum" ...
 $ x      : num  0.4 316 0.502 187 5.3 ...
> 
> 
> 
> dim(tRNA)
[1] 3543    2
> names(tRNA) <- c("species", "tRNA")
> dim(rRNA)
[1] 3115    2
> names(rRNA) <- c("species", "rRNA")
> dim(d1_up)
[1] 1603    2
> names(d1_up) <- c("species", "d1_up")
> dim(d1_lo)
[1] 4053    2
> names(d1_lo) <- c("species", "d1_lo")
> dim(doubling)
[1] 928   2
> names(doubling) <- c("species", "doubling_h")
> dim(cell.vol)
[1] 48  2
> names(cell.vol) <- c("species", "volume")
> ## Cell Volume
> 
> 
> doubling <- aggregate(spp.doubling$doubling_h, by = list(spp.doubling$species), mean, na.action = na.rm)
> cell.vol <- aggregate(vol$volume, by = list(vol$species), mean)
> str(cell.vol)
'data.frame':	48 obs. of  2 variables:
 $ Group.1: chr  "Aeropyrum pernix" "Anabaena cylindrica" "Arthrobacter sp. FB24" "Azotobacter chroococcum" ...
 $ x      : num  0.4 316 0.502 187 5.3 ...
> 
> dim(doubling)
[1] 928   2
> names(doubling) <- c("species", "doubling_h")
> dim(cell.vol)
[1] 48  2
> names(cell.vol) <- c("species", "volume")
> 
> 
> obj <- rep()
> for(i in cell.vol$species){
+     kingdom <- data$superkingdom[data$species == i][1]
+     obj <- c(obj, kingdom)
+ }
> 
> cell.vol$kingdom <- obj
> cell.vol$kingdom[11] <- "Bacteria"
> 
> doubling$species <- gsub("[[:punct:]]", "", doubling$species)
> doubling$species <- gsub(" ", "_", doubling$species)
> cell.vol$species <- gsub(" ", "_", cell.vol$species)
> 
> v.dat <- merge(cell.vol, doubling, by = "species")
> v.dat <- v.dat[!v.dat$species == "Sphingopyxis_alaskensis", ] ## possible outlier
> v.dat <- v.dat[!v.dat$species == "Anabaena_cylindrica", ] ## possible outlier
> v.dat <- v.dat[!v.dat$species == "Haloferax_volcanii", ] ## possible outlier
> v.dat <- v.dat[!v.dat$species == "Azotobacter_chroococcum", ] ## possible outlier
> rownames(v.dat) <- v.dat$species
> 
> vol.tree <- read.tree("vol.spp.nwk")
> vol.tree <- force.ultrametric(vol.tree)
***************************************************************
*                          Note:                              *
*    force.ultrametric does not include a formal method to    *
*    ultrametricize a tree & should only be used to coerce    *
*   a phylogeny that fails is.ultrametric due to rounding --  *
*    not as a substitute for formal rate-smoothing methods.   *
***************************************************************
> 
> check <- name.check(vol.tree, v.dat)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.vol <- drop.tip(vol.tree, rm_phy)
> 
> vol.dat <- subset(v.dat, subset = v.dat$species %in% tree.vol$tip, select = names(v.dat))
> name.check(tree.vol, vol.dat)
[1] "OK"
> str(vol.dat)
'data.frame':	29 obs. of  4 variables:
 $ species   : chr  "Aeropyrum_pernix" "Bacillus_subtilis" "Bdellovibrio_bacteriovorus" "Caulobacter_vibrioides" ...
 $ volume    : num  0.4 0.9 0.134 0.66 0.48 2.7 0.717 1 1.2 1.15 ...
 $ kingdom   : chr  "Archaea" "Bacteria" "Bacteria" "Bacteria" ...
 $ doubling_h: num  3.54 0.431 1.4 1.42 1.548 ...
> col.br <- setNames(c("purple", "orange"), c("Archaea", "Bacteria"))
> 
> plotTree(tree.vol, ftype = "i", lwd = 3, mar = c(3.5, 1, 1, 3))
> 
> par(new = TRUE, col = "transparent")
> 
> painted <- paintSubTree(tree.vol, 52, "Archaea" ,"0")
> plotSimmap(painted, col.br, ftype = "i", lwd = 3, mar = c(3.5, 1, 1, 3))
> 
> par(new = TRUE, col = "transparent")
> 
> painted <- paintSubTree(tree.vol, 31, "Bacteria")
> plotSimmap(painted, col.br, ftype = "i", lwd = 3, mar = c(3.5, 1, 1, 3))
> 
> par(new = TRUE, col = "black")
> 
> legend("bottomleft", legend = c("Archaea", "Bacteria"), lwd = 3, col = col.br, bty = "n")
> axisPhylo(1, line = -0.1)
> mtext("Time (mya)", side = 1, line = 2, at = 2000)
> 
> 
> obj <- get("last_plot.phylo", envir = .PlotPhyloEnv)
> x2 <- runif(100, obj$x.lim[2] + 10, obj$x.lim[2] + 50)
> spp <- gsub("(_).*","", tree.vol$tip.label)[-c(3, 6, 9, 10, 12, 14, 16, 18, 21, 24, 28)]
> spp[7] <- "Cyanobacteria"
> spp[8] <- "Mycoplasma_genitalium"
> spp[10] <- "Pleurocapsa fuliginosa"
> 
> 
> col.fill <- c(rep("orange", 13), rep("purple", 7))
> col.bor <- c(rep("black", 13), rep("red", 7))
> idx <- 1
> for(i in spp){
+     x2
+     uuid <- get_uuid(name = i, n = 1)
+     img <- get_phylopic(uuid = uuid)
+     nodes <- sapply(i, grep, x = tree.vol$tip.label)
+     for(j in nodes){
+         add_phylopic_base(img = img, x = sample(x2, 1), y = j, ysize = 1, color = col.bor[idx], fill = col.fill[idx])
+ 
+     }
+     idx = idx + 1
+ }
> 
> uuid <- get_uuid(name = "Chroococcus turgidus", n = 1)
> img <- get_phylopic(uuid = uuid)
> add_phylopic_base(img = img, x = 7400, y = 10, ysize = 1, color = "black", fill = "orange")
> 
> uuid <- get_uuid(name = "Pleurocapsa fuliginosa", n = 1)
> img <- get_phylopic(uuid = uuid)
> add_phylopic_base(img = img, x = 7400, y = 17, ysize = 1, color = "black", fill = "orange")
> 
> uuid <- get_uuid(name = "Fimbriimonas ginsengisoli", n = 1)
> img <- get_phylopic(uuid = uuid)
> add_phylopic_base(img = img, x = 7400, y = 11, ysize = 1, color = "green", fill = "orange")
> spp.d1_up <- data[!is.na(data$d1_up), ]
> spp.temp.op <- data[!is.na(data$optimum_tmp), ]
> spp.growth_temp <- data[!is.na(data$growth_tmp), ]
> spp.doubling <- data[!is.na(data$doubling_h), ]
> 
> d1_up <- aggregate(spp.d1_up$d1_up, by = list(spp.d1_up$species), mean, na.action = na.rm)
> doubling <- aggregate(spp.doubling$doubling_h, by = list(spp.doubling$species), mean, na.action = na.rm)
> temp.op <- aggregate(spp.temp.op$optimum_tmp, by = list(spp.temp.op$species), mean, na.action = na.rm)
> growth_temp <- aggregate(spp.growth_temp$growth_tmp, by = list(spp.growth_temp$species), mean, na.action = na.rm)
> 
> dim(doubling)
[1] 928   2
> dim(doubling)
[1] 928   2
> names(doubling) <- c("species", "doubling_h")
> dim(d1_up)
[1] 1603    2
> names(d1_up) <- c("species", "d1_up")
> dim(temp.op)
[1] 7023    2
> names(temp.op) <- c("species", "tmp.op")
> dim(growth_temp)
[1] 11638     2
> names(growth_temp) <- c("species", "growth_tmp")
> 
> 
> mrg.tmp <- merge(temp.op, growth_temp, by = "species")
> str(mrg.tmp)
'data.frame':	5390 obs. of  3 variables:
 $ species   : chr  "'Sphingomonas ginsengisoli' Hoang et al. 2012" "[Bacillus] selenitireducens" "[Bacteroides] pectinophilus" "[Clostridium] alkalicellulosi" ...
 $ tmp.op    : num  30 26 37.5 35 60 ...
 $ growth_tmp: num  28 26 37 36.2 55 ...
> 
> 
> mrg.op.tmp <- mrg.tmp[mrg.tmp$growth_tmp == mrg.tmp$tmp.op, ]
> mrg.upper.tmp <- mrg.tmp[mrg.tmp$growth_tmp > mrg.tmp$tmp.op, ]
> mrg.lower.tmp <- mrg.tmp[mrg.tmp$growth_tmp < mrg.tmp$tmp.op, ]
> 
> mrg.tmp.op <- merge(mrg.op.tmp, d1_up, by = "species")
> str(mrg.tmp.op)
'data.frame':	321 obs. of  4 variables:
 $ species   : chr  "[Clostridium] lavalense" "[Hallella] seregens" "Acaricomes phytoseiuli" "Acetomicrobium hydrogeniformans" ...
 $ tmp.op    : num  36 37 25 55 25 37 30 25 25 30 ...
 $ growth_tmp: num  36 37 25 55 25 37 30 25 25 30 ...
 $ d1_up     : num  1.5 1.5 0.8 0.5 0.8 1 1.7 0.5 0.6 0.7 ...
> 
> mrg.tmp.upper <- merge(mrg.upper.tmp, d1_up, by = "species")
> str(mrg.tmp.upper)
'data.frame':	375 obs. of  4 variables:
 $ species   : chr  "Acetohalobium arabaticum" "Acidaminococcus fermentans" "Acidisoma tundrae" "Actinocatenispora thailandica" ...
 $ tmp.op    : num  34 35.2 18.5 27.5 26.5 ...
 $ growth_tmp: num  37 37 20 29 28 ...
 $ d1_up     : num  1 1 1.5 0.4 2 1.8 0.5 1 0.4 1 ...
> 
> mrg.tmp.lower <- merge(mrg.lower.tmp, d1_up, by = "species")
> str(mrg.tmp.lower)
'data.frame':	629 obs. of  4 variables:
 $ species   : chr  "[Clostridium] caenicola" "[Clostridium] fimetarium" "[Clostridium] paradoxum" "[Clostridium] stercorarium" ...
 $ tmp.op    : num  60 22.5 56 62.1 33 ...
 $ growth_tmp: num  55 20 55.2 60 30 ...
 $ d1_up     : num  0.6 0.6 1.1 0.8 0.6 1 0.2 0.9 1 1.2 ...
> 
> mrg.tmp.op.growth <- merge(mrg.tmp.op, doubling, by = "species")
> str(mrg.tmp.op.growth)
'data.frame':	46 obs. of  5 variables:
 $ species   : chr  "Anaerolinea thermolimosa" "Brucella abortus" "Colwellia piezophila" "Desulfovibrio inopinatus" ...
 $ tmp.op    : num  50 37 10 30 50 25 36 37 55 65 ...
 $ growth_tmp: num  50 37 10 30 50 25 36 37 55 65 ...
 $ d1_up     : num  0.4 0.7 1 1.5 0.28 0.9 1.6 1.2 1 0.9 ...
 $ doubling_h: num  48 2 4.83 20 3.5 7.3 1.33 14 1.16 1.75 ...
> 
> mrg.tmp.upper.growth <- merge(mrg.tmp.upper, doubling, by = "species")
> str(mrg.tmp.upper.growth)
'data.frame':	59 obs. of  5 variables:
 $ species   : chr  "Alkalibacterium iburiense" "Anaerobranca gottschalkii" "Archaeoglobus fulgidus" "Azotobacter chroococcum" ...
 $ tmp.op    : num  33.5 52.5 77.7 26.2 33 ...
 $ growth_tmp: num  37 52.6 78.3 28 38.5 ...
 $ d1_up     : num  0.7 0.5 1 2.3 1.2 1 0.5 0.7 1.5 6.3 ...
 $ doubling_h: num  2.39 0.8 11.75 0.45 1.51 ...
> 
> mrg.tmp.lower.growth <- merge(mrg.tmp.lower, doubling, by = "species")
> str(mrg.tmp.lower.growth)
'data.frame':	104 obs. of  5 variables:
 $ species   : chr  "[Clostridium] paradoxum" "[Clostridium] stercorarium" "Acetomicrobium mobile" "Alicyclobacillus acidocaldarius" ...
 $ tmp.op    : num  56 62.1 56.2 60.4 47.5 ...
 $ growth_tmp: num  55.2 60 54.3 59.4 46.2 ...
 $ d1_up     : num  1.1 0.8 1 0.9 1 0.8 1 0.8 0.6 0.2 ...
 $ doubling_h: num  0.67 8.6 3.39 0.38 1.5 ...
> 
> 
> obj <- rep()
> for(i in mrg.tmp.op$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.op$kingdom <- obj
> head(mrg.tmp.op)
                          species tmp.op growth_tmp d1_up  kingdom
1         [Clostridium] lavalense     36         36   1.5 Bacteria
2             [Hallella] seregens     37         37   1.5 Bacteria
3          Acaricomes phytoseiuli     25         25   0.8 Bacteria
4 Acetomicrobium hydrogeniformans     55         55   0.5 Bacteria
5                Acidicapsa ligni     25         25   0.8 Bacteria
6            Actinomyces georgiae     37         37   1.0 Bacteria
> 
> mrg.tmp.op$species <- gsub("[[:punct:]]", "", mrg.tmp.op$species)
> mrg.tmp.op$species <- gsub(" ", "_", mrg.tmp.op$species)
> rownames(mrg.tmp.op) <- mrg.tmp.op$species
> head(mrg.tmp.op$species)
[1] "Clostridium_lavalense"           "Hallella_seregens"              
[3] "Acaricomes_phytoseiuli"          "Acetomicrobium_hydrogeniformans"
[5] "Acidicapsa_ligni"                "Actinomyces_georgiae"           
> 
> check <- name.check(tree, mrg.tmp.op)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.op <- drop.tip(tree, rm_phy)
> 
> tmp.op.dat <- subset(mrg.tmp.op, subset = mrg.tmp.op$species %in% tree.tmp.op$tip, select = names(mrg.tmp.op))
> name.check(tree.tmp.op, tmp.op.dat)
[1] "OK"
> 
> 
> 
> 
> 
> 
> obj <- rep()
> for(i in mrg.tmp.upper$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.upper$kingdom <- obj
> head(mrg.tmp.upper)
                        species tmp.op growth_tmp d1_up  kingdom
1      Acetohalobium arabaticum  34.00         37   1.0 Bacteria
2    Acidaminococcus fermentans  35.25         37   1.0 Bacteria
3             Acidisoma tundrae  18.50         20   1.5 Bacteria
4 Actinocatenispora thailandica  27.50         29   0.4 Bacteria
5    Actinokineospora baliensis  26.50         28   2.0 Bacteria
6 Actinokineospora cibodasensis  26.50         28   1.8 Bacteria
> 
> mrg.tmp.upper$species <- gsub("[[:punct:]]", "", mrg.tmp.upper$species)
> mrg.tmp.upper$species <- gsub(" ", "_", mrg.tmp.upper$species)
> rownames(mrg.tmp.upper) <- mrg.tmp.upper$species
> head(mrg.tmp.upper$species)
[1] "Acetohalobium_arabaticum"      "Acidaminococcus_fermentans"   
[3] "Acidisoma_tundrae"             "Actinocatenispora_thailandica"
[5] "Actinokineospora_baliensis"    "Actinokineospora_cibodasensis"
> 
> check <- name.check(tree, mrg.tmp.upper)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.upper <- drop.tip(tree, rm_phy)
> 
> tmp.upper.dat <- subset(mrg.tmp.upper, subset = mrg.tmp.upper$species %in% tree.tmp.upper$tip, select = names(mrg.tmp.upper))
> name.check(tree.tmp.upper, tmp.upper.dat)
[1] "OK"
> 
> 
> 
> 
> 
> 
> 
> obj <- rep()
> for(i in mrg.tmp.lower$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.lower$kingdom <- obj
> head(mrg.tmp.lower)
                     species   tmp.op growth_tmp d1_up  kingdom
1    [Clostridium] caenicola 60.00000      55.00   0.6 Bacteria
2   [Clostridium] fimetarium 22.50000      20.00   0.6 Bacteria
3    [Clostridium] paradoxum 56.00000      55.25   1.1 Bacteria
4 [Clostridium] stercorarium 62.08333      60.00   0.8 Bacteria
5    [Clostridium] sufflavum 33.00000      30.00   0.6 Bacteria
6  Acanthopleuribacter pedis 30.00000      25.00   1.0 Bacteria
> 
> mrg.tmp.lower$species <- gsub("[[:punct:]]", "", mrg.tmp.lower$species)
> mrg.tmp.lower$species <- gsub(" ", "_", mrg.tmp.lower$species)
> rownames(mrg.tmp.lower) <- mrg.tmp.lower$species
> head(mrg.tmp.lower$species)
[1] "Clostridium_caenicola"     "Clostridium_fimetarium"   
[3] "Clostridium_paradoxum"     "Clostridium_stercorarium" 
[5] "Clostridium_sufflavum"     "Acanthopleuribacter_pedis"
> 
> check <- name.check(tree, mrg.tmp.lower)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.lower <- drop.tip(tree, rm_phy)
> 
> tmp.lower.dat <- subset(mrg.tmp.lower, subset = mrg.tmp.lower$species %in% tree.tmp.lower$tip, select = names(mrg.tmp.lower))
> name.check(tree.tmp.lower, tmp.lower.dat)
[1] "OK"
> 
> 
> 
> 
> 
> ## Growth
> 
> 
> 
> 
> obj <- rep()
> for(i in mrg.tmp.op.growth$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.op.growth$kingdom <- obj
> head(mrg.tmp.op.growth)
                       species tmp.op growth_tmp d1_up doubling_h  kingdom
1     Anaerolinea thermolimosa     50         50  0.40      48.00 Bacteria
2             Brucella abortus     37         37  0.70       2.00 Bacteria
3         Colwellia piezophila     10         10  1.00       4.83 Bacteria
4     Desulfovibrio inopinatus     30         30  1.50      20.00 Bacteria
5       Exilispira thermophila     50         50  0.28       3.50 Bacteria
6 Flavobacterium denitrificans     25         25  0.90       7.30 Bacteria
> 
> mrg.tmp.op.growth$species <- gsub("[[:punct:]]", "", mrg.tmp.op.growth$species)
> mrg.tmp.op.growth$species <- gsub(" ", "_", mrg.tmp.op.growth$species)
> rownames(mrg.tmp.op.growth) <- mrg.tmp.op.growth$species
> head(mrg.tmp.op.growth$species)
[1] "Anaerolinea_thermolimosa"     "Brucella_abortus"            
[3] "Colwellia_piezophila"         "Desulfovibrio_inopinatus"    
[5] "Exilispira_thermophila"       "Flavobacterium_denitrificans"
> 
> check <- name.check(tree, mrg.tmp.op.growth)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.op.growth <- drop.tip(tree, rm_phy)
> 
> tmp.op.dat.growth <- subset(mrg.tmp.op.growth, subset = mrg.tmp.op.growth$species %in% tree.tmp.op.growth$tip, select = names(mrg.tmp.op.growth))
> name.check(tree.tmp.op.growth, tmp.op.dat.growth)
[1] "OK"
> 
> 
> 
> 
> 
> 
> obj <- rep()
> for(i in mrg.tmp.upper.growth$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.upper.growth$kingdom <- obj
> head(mrg.tmp.upper.growth)
                          species   tmp.op growth_tmp d1_up doubling_h  kingdom
1       Alkalibacterium iburiense 33.50000   37.00000   0.7       2.39 Bacteria
2       Anaerobranca gottschalkii 52.50000   52.65000   0.5       0.80 Bacteria
3          Archaeoglobus fulgidus 77.66667   78.33333   1.0      11.75  Archaea
4         Azotobacter chroococcum 26.20000   28.00000   2.3       0.45 Bacteria
5              Bacillus anthracis 33.00000   38.50000   1.2       1.51 Bacteria
6 Caldicellulosiruptor acetigenus 66.50000   67.45000   1.0       4.93 Bacteria
> 
> mrg.tmp.upper.growth$species <- gsub("[[:punct:]]", "", mrg.tmp.upper.growth$species)
> mrg.tmp.upper.growth$species <- gsub(" ", "_", mrg.tmp.upper.growth$species)
> rownames(mrg.tmp.upper.growth) <- mrg.tmp.upper.growth$species
> head(mrg.tmp.upper.growth$species)
[1] "Alkalibacterium_iburiense"       "Anaerobranca_gottschalkii"      
[3] "Archaeoglobus_fulgidus"          "Azotobacter_chroococcum"        
[5] "Bacillus_anthracis"              "Caldicellulosiruptor_acetigenus"
> 
> check <- name.check(tree, mrg.tmp.upper.growth)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.upper.growth <- drop.tip(tree, rm_phy)
> 
> tmp.upper.dat.growth <- subset(mrg.tmp.upper.growth, subset = mrg.tmp.upper.growth$species %in% tree.tmp.upper.growth$tip, select = names(mrg.tmp.upper.growth))
> name.check(tree.tmp.upper.growth, tmp.upper.dat.growth)
[1] "OK"
> 
> 
> 
> 
> 
> 
> 
> obj <- rep()
> for(i in mrg.tmp.lower.growth$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> mrg.tmp.lower.growth$kingdom <- obj
> head(mrg.tmp.lower.growth)
                          species   tmp.op growth_tmp d1_up doubling_h  kingdom
1         [Clostridium] paradoxum 56.00000   55.25000   1.1       0.67 Bacteria
2      [Clostridium] stercorarium 62.08333   60.00000   0.8       8.60 Bacteria
3           Acetomicrobium mobile 56.25000   54.30000   1.0       3.39 Bacteria
4 Alicyclobacillus acidocaldarius 60.40000   59.36667   0.9       0.38 Bacteria
5        Alicyclobacillus pomorum 47.50000   46.25000   1.0       1.50 Bacteria
6              Bacillus coagulans 50.40000   44.30000   0.8       0.72 Bacteria
> 
> mrg.tmp.lower.growth$species <- gsub("[[:punct:]]", "", mrg.tmp.lower.growth$species)
> mrg.tmp.lower.growth$species <- gsub(" ", "_", mrg.tmp.lower.growth$species)
> rownames(mrg.tmp.lower.growth) <- mrg.tmp.lower.growth$species
> head(mrg.tmp.lower.growth$species)
[1] "Clostridium_paradoxum"           "Clostridium_stercorarium"       
[3] "Acetomicrobium_mobile"           "Alicyclobacillus_acidocaldarius"
[5] "Alicyclobacillus_pomorum"        "Bacillus_coagulans"             
> 
> check <- name.check(tree, mrg.tmp.lower.growth)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tmp.lower.growth <- drop.tip(tree, rm_phy)
> 
> tmp.lower.dat.growth <- subset(mrg.tmp.lower.growth, subset = mrg.tmp.lower.growth$species %in% tree.tmp.lower.growth$tip, select = names(mrg.tmp.lower.growth))
> name.check(tree.tmp.lower.growth, tmp.lower.dat.growth)
[1] "OK"
> 
> tmp.lower.dat <- tmp.lower.dat[tmp.lower.dat$d1_up < 4, ] ## Removing potential outliers
> tmp.op.dat <- tmp.op.dat[tmp.op.dat$d1_up < 4, ] ## Removing potential outliers
> tmp.upper.dat <- tmp.upper.dat[tmp.upper.dat$d1_up < 4, ] ## Removing potential outliers
> 
> 
> #png("figure4.png", height = 7, width = 7, units = "in", res = 360)
> 
> 
> layout(matrix(c(1, 1, 2, 2, 3, 3,
+                 1, 1, 2, 2, 3, 3,
+                 4, 4, 5, 5, 6, 6,
+                 4, 4, 5, 5, 6, 6), nrow = 4, ncol = 6, byrow = TRUE))
> 
> 
> 
> ## lower
> 
> 
> tmp.lower.dat <- tmp.lower.dat[tmp.lower.dat$d1_up < 4, ] ## Removing potential outliers
> 
> 
> model6.1 <- lm(d1_up ~ log10(tmp.op), data = tmp.lower.dat)
> 
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.lower.dat$tmp.op) - mean(log10(tmp.lower.dat$tmp.op)))^2), 2)
> s2 <- var(tmp.lower.dat$d1_up)
> n <- length(tmp.lower.dat$d1_up)
> x <- seq(min(log10(tmp.lower.dat$tmp.op)), max(log10(tmp.lower.dat$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.lower.dat$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model6.1)[1] + coef(model6.1)[2]*x) + ic.s
> lower.i <- (coef(model6.1)[1] + coef(model6.1)[2]*x) + ic.i
> 
> par(mar = c(6.4, 4, 2, 0), mgp = c(2.8, 1, 0))
>     
> plot(d1_up ~ log10(tmp.op), data = tmp.lower.dat, ylab = expression(paste("Cell diameter ", log[10], sep = " ")(mu*m)), xlab = expression(paste("Lower temperature \u00B0C")~(log[10])), las = 1, pch = 21, cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(tmp.lower.dat$kingdom)))
> 
> plot(d1_up ~ log10(tmp.op), data = tmp.lower.dat, xlab = "", ylab = "", las = 1, pch = 21, col = cols[tmp.lower.dat$kingdom], bg = cols[tmp.lower.dat$kingdom], cex = 0.8, axes = FALSE)
> 
> #lines(x = x, y = (coef(model6.1)[1] + coef(model6.1)[2]*x), lwd = 2, col = "black")
> #polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("topleft", legend = levels(as.factor((tmp.lower.dat$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> legend("topright", legend = paste("n = ", length(tmp.lower.dat$species)), bty = "n", cex = 0.8)
> 
> mtext("A", side = 2, line = 2.6, at = 3.8, las = 1, font = 2)
> 
> 
> ## Cell size and temp opt
> 
> tmp.op.dat <- tmp.op.dat[tmp.op.dat$d1_up < 4, ] ## Removing potential outliers
> 
> #model6 <- gls(d1_up ~ log10(tmp.op), correlation = corBrownian(phy = tree.tmp, form = ~species), data = tmp.dat, method = "ML")
> 
> #model6 <- lm(d1_up ~ log10(tmp.op), data = tmp.dat)
> model6 <- lm(d1_up ~ log10(tmp.op), data = tmp.op.dat)
> 
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.op.dat$tmp.op) - mean(log10(tmp.op.dat$tmp.op)))^2), 2)
> s2 <- var(tmp.op.dat$d1_up)
> n <- length(tmp.op.dat$d1_up)
> x <- seq(min(log10(tmp.op.dat$tmp.op)), max(log10(tmp.op.dat$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.op.dat$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model6)[1] + coef(model6)[2]*x) + ic.s
> lower.i <- (coef(model6)[1] + coef(model6)[2]*x) + ic.i
> 
> 
> par(mar = c(6.4, 2.3, 2, 0.1))
> 
> plot(d1_up ~ log10(tmp.op), data = tmp.op.dat, ylab = " ",  xlab = expression(paste("Optimum temperature \u00B0C")~(log[10])), las = 1, pch = 21, cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(tmp.op.dat$kingdom)))
> 
> plot(d1_up ~ log10(tmp.op), data = tmp.op.dat, xlab = "", ylab = "", las = 1, pch = 21, col = cols[tmp.op.dat$kingdom], bg = cols[tmp.op.dat$kingdom], cex = 0.8, axes = FALSE)
> 
> #lines(x = x, y = (coef(model6)[1] + coef(model6)[2]*x), lwd = 2, col = "black")
> #polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("topleft", legend = levels(as.factor((tmp.op.dat$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> legend(x = 0.7, y = 3.07, legend = paste("n = ", length(tmp.op.dat$species)), bty = "n", cex = 0.8)
> 
> 
> 
> 
> 
> ## upper
> 
> 
> tmp.upper.dat <- tmp.upper.dat[tmp.upper.dat$d1_up < 4, ] ## Removing potential outliers
> 
> 
> model6.3 <- lm(d1_up ~ log10(tmp.op), data = tmp.upper.dat)
> 
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.upper.dat$tmp.op) - mean(log10(tmp.upper.dat$tmp.op)))^2), 2)
> s2 <- var(tmp.upper.dat$d1_up)
> n <- length(tmp.upper.dat$d1_up)
> x <- seq(min(log10(tmp.upper.dat$tmp.op)), max(log10(tmp.upper.dat$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.upper.dat$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model6.3)[1] + coef(model6.3)[2]*x) + ic.s
> lower.i <- (coef(model6.3)[1] + coef(model6.3)[2]*x) + ic.i
> 
> 
> par(mar = c(6.4, 2.3, 2, 0.2))
> 
> plot(d1_up ~ log10(tmp.op), data = tmp.upper.dat, ylab = " ", xlab = expression(paste("Upper temperature \u00B0C")~(log[10])), las = 1, pch = 21, cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(tmp.upper.dat$kingdom)))
> 
> plot(d1_up ~ log10(tmp.op), data = tmp.upper.dat, xlab = "", ylab = "", las = 1, pch = 21, col = cols[tmp.upper.dat$kingdom], bg = cols[tmp.upper.dat$kingdom], cex = 0.8, axes = FALSE)
> 
> lines(x = x, y = (coef(model6.3)[1] + coef(model6.3)[2]*x), lwd = 2, col = "black")
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("topleft", legend = levels(as.factor((tmp.upper.dat$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> legend(x = 0.6, y = 3, legend = paste("n = ", length(tmp.upper.dat$species)), bty = "n", cex = 0.8)
> 
> 
> 
> ## GROWTH
> 
> 
> ## lower
> 
> 
> model7.1 <- lm(log10(doubling_h) ~ log10(tmp.op), data = tmp.lower.dat.growth)
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.lower.dat.growth$tmp.op) - mean(log10(tmp.lower.dat.growth$tmp.op)))^2), 2)
> s2 <- var(log10(tmp.lower.dat.growth$doubling_h))
> n <- length(log10(tmp.lower.dat.growth$doubling_h))
> x <- seq(min(log10(tmp.lower.dat.growth$tmp.op)), max(log10(tmp.lower.dat.growth$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.lower.dat.growth$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model7.1)[1] + coef(model7.1)[2]*x) + ic.s
> lower.i <- (coef(model7.1)[1] + coef(model7.1)[2]*x) + ic.i
> 
> par(mar = c(6.4, 4, 2, 0), mgp = c(2.8, 1, 0))
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.lower.dat.growth, ylab = expression(paste("Doubling ", log[10], sep = " ")(h)), xlab = expression(paste("Lower temperature \u00B0C ")~(log[10])), las = 1, pch = 21, bg = alpha("black", 0.3), cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols3 <- c("purple", "orange")[as.numeric(as.factor(tmp.lower.dat.growth$kingdom))]
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.lower.dat.growth, xlab = "", ylab = "", las = 1, pch = 21, col = cols3, bg = cols3, cex = 0.8, axes = FALSE)
> 
> lines(x = x, y = (coef(model7.1)[1] + coef(model7.1)[2]*x), lty = 2, lwd = 2, col = "black")
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("bottomleft", legend = levels(as.factor((tmp.lower.dat.growth$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> 
> mtext("B", side = 2, line = 2.6, at = 3, las = 1, font = 2)
> legend("topright", legend = paste("n = ", length(tmp.lower.dat.growth$species)), bty = "n", cex = 0.8)
> 
> 
> ## Doubling and optimum temp
> 
> #model7 <- gls(log(doubling_h) ~ log(tmp.op), correlation = corBrownian(phy = tree.tmp2, form = ~species), data = tmp.dat2, method = "ML")
> 
> model7 <- lm(log10(doubling_h) ~ log10(tmp.op), data = tmp.op.dat.growth)
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.op.dat.growth$tmp.op) - mean(log10(tmp.op.dat.growth$tmp.op)))^2), 2)
> s2 <- var(log10(tmp.op.dat.growth$doubling_h))
> n <- length(log10(tmp.op.dat.growth$doubling_h))
> x <- seq(min(log10(tmp.op.dat.growth$tmp.op)), max(log10(tmp.op.dat.growth$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.op.dat.growth$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.s
> lower.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.i
> 
> 
> par(mar = c(6.4, 2.3, 2, 0.1))
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.op.dat.growth, ylab = expression(paste("Doubling ", log[10], sep = " ")(h)), xlab = expression(paste("Optimum temperature \u00B0C ")~(log[10])), las = 1, pch = 21, bg = alpha("black", 0.3), cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols3 <- c("purple", "orange")[as.numeric(as.factor(tmp.op.dat.growth$kingdom))]
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.op.dat.growth, xlab = "", ylab = "", las = 1, pch = 21, col = cols3, bg = cols3, cex = 0.8, axes = FALSE)
> 
> lines(x = x, y = (coef(model7)[1] + coef(model7)[2]*x), lty = 2, lwd = 2, col = "black")
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("bottomleft", legend = levels(as.factor((tmp.op.dat.growth$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> legend(x = 0.92, y = 0.12, legend = paste("n = ", length(tmp.op.dat.growth$species)), bty = "n", cex = 0.8)
> 
> 
> ## upper
> 
> 
> model7.2 <- lm(log10(doubling_h) ~ log10(tmp.op), data = tmp.upper.dat.growth)
> 
> ## IC
> 
> SSX <- sum(round((log10(tmp.upper.dat.growth$tmp.op) - mean(log10(tmp.upper.dat.growth$tmp.op)))^2), 2)
> s2 <- var(log10(tmp.upper.dat.growth$doubling_h))
> n <- length(log10(tmp.upper.dat.growth$doubling_h))
> x <- seq(min(log10(tmp.upper.dat.growth$tmp.op)), max(log10(tmp.upper.dat.growth$tmp.op)), length = 30)
> m.x <- mean(round(log10(tmp.upper.dat.growth$tmp.op), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(model7.2)[1] + coef(model7.2)[2]*x) + ic.s
> lower.i <- (coef(model7.2)[1] + coef(model7.2)[2]*x) + ic.i
> 
> par(mar = c(6.4, 2.3, 2, 0.2))
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.upper.dat.growth, ylab = expression(paste("Doubling ", log[10], sep = " ")(h)), xlab = expression(paste("Upper temperature \u00B0C ")~(log[10])), las = 1, pch = 21, bg = alpha("black", 0.3), cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols3 <- c("purple", "orange")[as.numeric(as.factor(tmp.upper.dat.growth$kingdom))]
> 
> plot(log10(doubling_h) ~ log10(tmp.op), data = tmp.upper.dat.growth, xlab = "", ylab = "", las = 1, pch = 21, col = cols3, bg = cols3, cex = 0.8, axes = FALSE)
> 
> lines(x = x, y = (coef(model7.2)[1] + coef(model7.2)[2]*x), lty = 2, lwd = 2, col = "black")
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("bottomleft", legend = levels(as.factor((tmp.upper.dat.growth$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 0.8)
> legend(x = 0.6, y = -0.1, legend = paste("n = ", length(tmp.upper.dat.growth$species)), bty = "n", cex = 0.8)
> 
> #dev.off()
> 
> 
> 
> layout(matrix(c(0, 0, 0, 0,
+                 1, 1, 2, 2,
+                 1, 1, 2, 2,
+                 0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE))
> 
> ## IC
> 
> SSX <- sum(round((log10(vol.dat$volume) - mean(log10(vol.dat$volume)))^2), 2)
> s2 <- var(log10(vol.dat$doubling_h))
> n <- length(vol.dat$doubling_h)
> x <- seq(min(log10(vol.dat$volume)), max(log10(vol.dat$volume)), length = length(vol.dat$species))
> m.x <- mean(round(log(vol.dat$volume), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.s
Error: object 'pg.mod' not found
> lower.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.i
Error: object 'pg.mod' not found
> 
> 
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(vol.dat$kingdom)))
> vol.dat$kingdom <- as.factor(vol.dat$kingdom)
> 
> #plot(log10(doubling_h) ~ log10(volume), data = v.dat, type = "p", pch = 16, las = 1, ylab = expression(paste("Doubling")~log[10]*(h)), xlab = expression(paste("Cell volume")~log[10]*(mu*m^3)), type = "n")
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "n", pch = 21, las = 1, ylab = expression(paste("Doubling ", log[10], sep = " ")*(h)), xlab = expression(paste("Cell volume ", log[10], sep = " ")(mu*m^3)))
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "p", pch = 21, col = cols[vol.dat$kingdom], bg = cols[vol.dat$kingdom], las = 1, ylab = "", xlab = "", axes = FALSE)
> 
> lines(x, y = (coef(pg.mod)[1] + coef(pg.mod)[2]*x), lwd = 2)
Error: object 'pg.mod' not found
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
Error in xy.coords(x, y, setLab = FALSE) : 'x' and 'y' lengths differ
> 
> #legend("topright", legend = paste("n =", length(vol.dat$species), sep = " "), bty = "n")
> legend("bottomleft", legend = unique(vol.dat$kingdom), pch = 16, col = cols, bg = cols, bty = "n")
> legend(x = -2.6, y = 0, legend = paste(" = ", round(as.data.frame(summary(pg.mod)$tTable)[2, 1], 3)), bty = "n")
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'x' in selecting a method for function 'as.data.frame': error in evaluating the argument 'object' in selecting a method for function 'summary': object 'pg.mod' not found
> legend(x = -2.7, y = 0, legend = expression(beta), bty = "n")
> legend(x = -2.7, y = -0.13, legend = paste("p = ", round(as.data.frame(summary(pg.mod)$tTable)[2, 4], 3)), bty = "n")
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'x' in selecting a method for function 'as.data.frame': error in evaluating the argument 'object' in selecting a method for function 'summary': object 'pg.mod' not found
> mtext("A", side = 2, at = 1.6, line = 2.5, las = 1, font = 2)
> 
> 
> ## Doubling and optimum temp
> 
> mod.fg1 <- lm(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth)
> 
> #mod.fg1.pg <- gls(log10(doubling_h) ~ d1_up, correlation = corBrownian(phy = tree.tmp.op.growth, form = ~species), data = tmp.op.dat.growth, method = "ML")
> 
> ## IC
> 
> #SSX <- sum(round((log10(tmp.op.dat.growth$tmp.op) - mean(log10(tmp.op.dat.growth$tmp.op)))^2), 2)
> #s2 <- var(log10(tmp.op.dat.growth$doubling_h))
> #n <- length(log10(tmp.op.dat.growth$doubling_h))
> #x <- seq(min(log10(tmp.op.dat.growth$tmp.op)), max(log10(tmp.op.dat.growth$tmp.op)), length = 30)
> #m.x <- mean(round(log10(tmp.op.dat.growth$tmp.op), 1))
> #se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> #is <- qt(0.975, df = n - 2)
> #ii <- qt(0.025, df = n - 2)
> #ic.s <- se*is
> #ic.i <- se*ii
> #upper.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.s
> #lower.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.i
> 
> 
> plot(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth, ylab = expression(paste("Doubling ", log[10], sep = " ")(h)), xlab = expression(paste("Cell diameter")~log[10]~(mu*m)), las = 1, pch = 21, bg = alpha("black", 0.3), cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols3 <- c("purple", "orange")[as.numeric(as.factor(tmp.op.dat.growth$kingdom))]
> 
> plot(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth, xlab = "", ylab = "", las = 1, pch = 21, col = cols3, bg = cols3, cex = 1, axes = FALSE)
> 
> #lines(x = x, y = (coef(model7)[1] + coef(model7)[2]*x), lty = 2, lwd = 2, col = "black")
> #polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("bottomleft", legend = levels(as.factor((tmp.op.dat.growth$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 1)
> 
> mtext("B", side = 2, at = 2.35, line = 2.3, las = 1, font = 2)
> 
> ##dev.off()
> layout(matrix(c(0, 0, 0, 0,
+                 1, 1, 2, 2,
+                 1, 1, 2, 2,
+                 0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE))
> 
> ## IC
> 
> SSX <- sum(round((log10(vol.dat$volume) - mean(log10(vol.dat$volume)))^2), 2)
> s2 <- var(log10(vol.dat$doubling_h))
> n <- length(vol.dat$doubling_h)
> x <- seq(min(log10(vol.dat$volume)), max(log10(vol.dat$volume)), length = length(vol.dat$species))
> m.x <- mean(round(log(vol.dat$volume), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.s
Error: object 'pg.mod' not found
> lower.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.i
Error: object 'pg.mod' not found
> 
> 
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(vol.dat$kingdom)))
> vol.dat$kingdom <- as.factor(vol.dat$kingdom)
> 
> #plot(log10(doubling_h) ~ log10(volume), data = v.dat, type = "p", pch = 16, las = 1, ylab = expression(paste("Doubling")~log[10]*(h)), xlab = expression(paste("Cell volume")~log[10]*(mu*m^3)), type = "n")
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "n", pch = 21, las = 1, ylab = expression(paste("Doubling ", log[10], sep = " ")*(h)), xlab = expression(paste("Cell volume ", log[10], sep = " ")(mu*m^3)))
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "p", pch = 21, col = cols[vol.dat$kingdom], bg = cols[vol.dat$kingdom], las = 1, ylab = "", xlab = "", axes = FALSE)
> 
> lines(x, y = (coef(pg.mod)[1] + coef(pg.mod)[2]*x), lwd = 2)
Error: object 'pg.mod' not found
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
Error in xy.coords(x, y, setLab = FALSE) : 'x' and 'y' lengths differ
> 
> #legend("topright", legend = paste("n =", length(vol.dat$species), sep = " "), bty = "n")
> legend("bottomleft", legend = unique(vol.dat$kingdom), pch = 16, col = cols, bg = cols, bty = "n")
> legend(x = -2.6, y = 0, legend = paste(" = ", round(as.data.frame(summary(pg.mod)$tTable)[2, 1], 3)), bty = "n")
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'x' in selecting a method for function 'as.data.frame': error in evaluating the argument 'object' in selecting a method for function 'summary': object 'pg.mod' not found
> legend(x = -2.7, y = 0, legend = expression(beta), bty = "n")
> legend(x = -2.7, y = -0.13, legend = paste("p = ", round(as.data.frame(summary(pg.mod)$tTable)[2, 4], 3)), bty = "n")
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'x' in selecting a method for function 'as.data.frame': error in evaluating the argument 'object' in selecting a method for function 'summary': object 'pg.mod' not found
> mtext("A", side = 2, at = 1.6, line = 2.5, las = 1, font = 2)
> 
> 
> ## Doubling and optimum temp
> 
> mod.fg1 <- lm(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth)
> 
> #mod.fg1.pg <- gls(log10(doubling_h) ~ d1_up, correlation = corBrownian(phy = tree.tmp.op.growth, form = ~species), data = tmp.op.dat.growth, method = "ML")
> 
> ## IC
> 
> #SSX <- sum(round((log10(tmp.op.dat.growth$tmp.op) - mean(log10(tmp.op.dat.growth$tmp.op)))^2), 2)
> #s2 <- var(log10(tmp.op.dat.growth$doubling_h))
> #n <- length(log10(tmp.op.dat.growth$doubling_h))
> #x <- seq(min(log10(tmp.op.dat.growth$tmp.op)), max(log10(tmp.op.dat.growth$tmp.op)), length = 30)
> #m.x <- mean(round(log10(tmp.op.dat.growth$tmp.op), 1))
> #se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> #is <- qt(0.975, df = n - 2)
> #ii <- qt(0.025, df = n - 2)
> #ic.s <- se*is
> #ic.i <- se*ii
> #upper.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.s
> #lower.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.i
> 
> 
> plot(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth, ylab = expression(paste("Doubling ", log[10], sep = " ")(h)), xlab = expression(paste("Cell diameter")~log[10]~(mu*m)), las = 1, pch = 21, bg = alpha("black", 0.3), cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols3 <- c("purple", "orange")[as.numeric(as.factor(tmp.op.dat.growth$kingdom))]
> 
> plot(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth, xlab = "", ylab = "", las = 1, pch = 21, col = cols3, bg = cols3, cex = 1, axes = FALSE)
> 
> #lines(x = x, y = (coef(model7)[1] + coef(model7)[2]*x), lty = 2, lwd = 2, col = "black")
> #polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("bottomleft", legend = levels(as.factor((tmp.op.dat.growth$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 1)
> 
> mtext("B", side = 2, at = 2.35, line = 2.3, las = 1, font = 2)
> 
> tRNA <- aggregate(spp.tRNA$tRNA_genes, by = list(spp.tRNA$species), mean, na.action = na.rm)
> rRNA <- aggregate(spp.rRNA$rRNA16S_genes, by = list(spp.rRNA$species), mean, na.action = na.rm)
> cell.vol <- aggregate(vol$volume, by = list(vol$species), mean)
> d1_up <- aggregate(spp.d1_up$d1_up, by = list(spp.d1_up$species), mean, na.action = na.rm)
> doubling <- aggregate(spp.doubling$doubling_h, by = list(spp.doubling$species), mean, na.action = na.rm)
> 
> 
> #dim(tRNA)
> names(tRNA) <- c("species", "tRNA")
> #dim(rRNA)
> names(rRNA) <- c("species", "rRNA")
> #dim(cell.vol)
> names(cell.vol) <- c("species", "volume")
> #dim(d1_up)
> names(d1_up) <- c("species", "d1_up")
> #dim(doubling)
> names(doubling) <- c("species", "doubling_h")
> 
> 
> genes <- merge(rRNA, tRNA, by = "species")
> tran <- merge(genes, cell.vol, by = "species")
> tran2 <- merge(genes, d1_up, by = "species")
> tran3 <- merge(genes, doubling, by = "species")
> 
> obj <- rep()
> for(i in tran$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> tran$kingdom <- obj
> #head(tran)
> 
> tran$species <- gsub("[[:punct:]]", "", tran$species)
> tran$species <- gsub(" ", "_", tran$species)
> #head(tran)
> 
> tran <- tran[!tran$species == "Sphingopyxis_alaskensis", ] ## possible outlier
> rownames(tran) <- tran$species
> 
> tran.tree <- read.tree("tran.spp.nwk")
> #tran.tree <- force.ultrametric(tran.tree)
> 
> check <- name.check(tran.tree, tran)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tran <- drop.tip(tran.tree, rm_phy)
> 
> tran.dat <- subset(tran, subset = tran$species %in% tree.tran$tip, select = names(tran))
> #name.check(tree.tran, tran.dat)
> #str(tran.dat)
> 
> 
> obj <- rep()
> for(i in tran2$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> tran2$kingdom <- obj
> #head(tran)
> 
> tran2$species <- gsub("[[:punct:]]", "", tran2$species)
> tran2$species <- gsub(" ", "_", tran2$species)
> rownames(tran2) <- tran2$species
> #head(tran2)
> 
> check <- name.check(tree, tran2)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tran2 <- drop.tip(tree, rm_phy)
> 
> tran.dat2 <- subset(tran2, subset = tran2$species %in% tree$tip, select = names(tran2))
> #name.check(tree.tran2, tran.dat2)
> #str(tran.dat2)
> 
> 
> obj <- rep()
> for(i in tran3$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> tran3$kingdom <- obj
> #head(tran)
> 
> tran3$species <- gsub("[[:punct:]]", "", tran3$species)
> tran3$species <- gsub(" ", "_", tran3$species)
> rownames(tran3) <- tran3$species
> #head(tran3)
> 
> check <- name.check(tree, tran3)
> rm_phy <- check$tree_not_data
> rm_dat <- check$data_not_tree
> tree.tran3 <- drop.tip(tree, rm_phy)
> 
> tran.dat3 <- subset(tran3, subset = tran3$species %in% tree.tran3$tip, select = names(tran3))
> ##str(tran.dat3)
> 
> mod.gr1 <- lm(log10(rRNA) ~ log10(doubling_h), data = tran3)
> #summary(mod.gr1)
> 
> mod.gr2 <- lm(log10(tRNA) ~ log10(doubling_h), data = tran3)
> #summary(mod.gr2)
> 
> 
> ## GROWTH
> 
> 
> #png("figure2.png", height = 7, width = 7, units = "in", res = 360)
> 
> 
> SSX <- sum(round((log10(tran3$doubling_h) - mean(log10(tran3$doubling_h)))^2), 2)
> s2 <- var(log10(tran3$rRNA))
> n <- length(tran3$rRNA)
> x <- seq(min(log10(tran3$doubling_h)), max(log10(tran3$doubling_h)), length = length(tran3$species))
> m.x <- mean(round(log(tran3$doubling_h), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(mod.gr1)[1] + coef(mod.gr1)[2]*x) + ic.s
> lower.i <- (coef(mod.gr1)[1] + coef(mod.gr1)[2]*x) + ic.i
> 
> 
> cols2 <- setNames(c("purple", "orange"), levels(as.factor(tran3$kingdom)))
> 
> par(mar = c(5, 4, 1.5, 3.3))
> 
> plot(log10(rRNA) ~ log10(doubling_h), data = tran3, type = "n", pch = 16, las = 1, ylab = expression(log[10]~rRNA~genes), xlab = expression(paste("Doubling ", log[10], sep = " ")(h)))
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(rRNA) ~ log10(doubling_h), data = tran3, type = "p", pch = 16, col = cols2[tran3$kingdom], bg = cols2[tran3$kingdom], las = 1, axes = FALSE, xaxt = "n", ylab = "", xlab = "")
> 
> lines(x = x, y = (coef(mod.gr1)[1] + coef(mod.gr1)[2]*x), lwd = 2)
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> 
> SSX <- sum(round((log10(tran3$doubling_h) - mean(log10(tran3$doubling_h)))^2), 2)
> s2 <- var(log10(tran3$tRNA))
> n <- length(tran3$tRNA)
> x <- seq(min(log10(tran3$doubling_h)), max(log10(tran3$doubling_h)), length = length(tran3$species))
> m.x <- mean(round(log(tran3$doubling_h), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(mod.gr2)[1] + coef(mod.gr2)[2]*x) + ic.s
> lower.i <- (coef(mod.gr2)[1] + coef(mod.gr2)[2]*x) + ic.i
> 
> cols2 <- setNames(c("purple", "orange"), levels(as.factor(tran3$kingdom)))
> 
> #plot(log10(tRNA) ~ log10(doubling_h), data = tran3, type = "n", pch = 16, las = 1, ylab = expression(log[10]~tRNA~genes), xlab = expression(paste("Doubling ", log[10], sep = " ")(h)))
> 
> #grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(tRNA) ~ log10(doubling_h), data = tran3, type = "p", pch = 8, col = cols2[tran3$kingdom], bg = cols2[tran3$kingdom], las = 1, axes = FALSE, xaxt = "n", ylab = "", xlab = "")
> 
> lines(x = x, y = (coef(mod.gr2)[1] + coef(mod.gr2)[2]*x), lwd = 2, lty = 2)
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> axis(side = 4, at = pretty(range(log10(tran3$tRNA))), las = 1)
> mtext(expression(log[10]~tRNA~genes), side = 4, line = 2.3)
> 
> legend("topright", legend = c("Archaea", "Bacteria"), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 1)
> legend(x = 1.7, y = 2.18, legend = "tRNA genes", lty = 2, lwd = 2, bty = "n")
> 
> #dev.off()
> 
> obj <- rep()
> for(i in d1_up$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> d1_up$kingdom <- obj
> head(d1_up)
                            species d1_up  kingdom
1           [Clostridium] aldenense   1.1 Bacteria
2           [Clostridium] caenicola   0.6 Bacteria
3          [Clostridium] fimetarium   0.6 Bacteria
4           [Clostridium] lavalense   1.5 Bacteria
5           [Clostridium] paradoxum   1.1 Bacteria
6 [Clostridium] polysaccharolyticum   1.1 Bacteria
> 
> d1_up$species <- gsub("[[:punct:]]", "", d1_up$species)
> d1_up$species <- gsub(" ", "_", d1_up$species)
> rownames(d1_up) <- d1_up$species
> dim(d1_up)
[1] 1603    3
> head(d1_up)
                                                        species d1_up  kingdom
Clostridium_aldenense                     Clostridium_aldenense   1.1 Bacteria
Clostridium_caenicola                     Clostridium_caenicola   0.6 Bacteria
Clostridium_fimetarium                   Clostridium_fimetarium   0.6 Bacteria
Clostridium_lavalense                     Clostridium_lavalense   1.5 Bacteria
Clostridium_paradoxum                     Clostridium_paradoxum   1.1 Bacteria
Clostridium_polysaccharolyticum Clostridium_polysaccharolyticum   1.1 Bacteria
> 
> d1_up <- d1_up[d1_up$d1_up < 6, ]
> 
> size <- lm(d1_up ~ kingdom, data = d1_up)
> summary(size)

Call:
lm(formula = d1_up ~ kingdom, data = d1_up)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.1004 -0.2783 -0.0783  0.1217  4.6217 

Coefficients:
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)      1.25044    0.04059  30.803   <2e-16 ***
kingdomBacteria -0.37217    0.04339  -8.577   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.5727 on 1594 degrees of freedom
Multiple R-squared:  0.04412,	Adjusted R-squared:  0.04352 
F-statistic: 73.57 on 1 and 1594 DF,  p-value: < 2.2e-16

> 
> 
> 
> layout(matrix(c(0, 0, 0, 0,
+                  1, 1, 2, 2,
+                  1, 1, 2, 2,
+                  0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE))
> 
> ## Basic boxplot
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = expression(paste("Cell size")~log[10]~(mu*m)), xlab = "Kingdom", col = "white", las = 1)
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = "", xlab = "", col = c(alpha("purple", 0.2), alpha("orange", 0.2)), las = 1)
> 
> segments(x0 = 1, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), x1 = 1.311, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), lwd = 2, lty = 2, col = "black")
> text(x = 1.4, y = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), expression(mu))
> 
> segments(x0 = 2, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), x1 = 2.4, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), lwd = 2, lty = 2, col = "black")
> text(x = 2.45, y = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), expression(mu))
> 
> text(x = 0.65, y = 5.1, paste("n =", length(d1_up$species), sep = " "))
> 
> #mean(d1_up$d1_up[d1_up$kingdom == "Archaea"])
> #mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"])
> 
> stripchart(d1_up ~ kingdom, vertical = TRUE, data = d1_up, method = "jitter", add = TRUE, pch = 20, col = c(alpha("purple", 0.3), alpha("orange", 0.5)))
> 
> mtext("B", side = 2, at = 6.1, line = 3, las = 1)
> obj <- rep()
> for(i in doubling$species){
+     kingdom <- unique(data$superkingdom[data$species == i])
+     obj <- c(obj, kingdom)
+ }
> 
> doubling$kingdom <- obj
> head(doubling)
                             species doubling_h  kingdom
1              [Bacillus] caldotenax       0.24 Bacteria
2 [Butyribacterium] methylotrophicum      20.00 Bacteria
3      [Clostridium] alkalicellulosi      14.00 Bacteria
4            [Clostridium] paradoxum       0.67 Bacteria
5         [Clostridium] stercorarium       8.60 Bacteria
6           [Clostridium] termitidis       9.62 Bacteria
> 
> doubling$species <- gsub("[[:punct:]]", "", doubling$species)
> doubling$species <- gsub(" ", "_", doubling$species)
> rownames(doubling) <- doubling$species
> dim(doubling)
[1] 928   3
> head(doubling)
                                                          species doubling_h
Bacillus_caldotenax                           Bacillus_caldotenax       0.24
Butyribacterium_methylotrophicum Butyribacterium_methylotrophicum      20.00
Clostridium_alkalicellulosi           Clostridium_alkalicellulosi      14.00
Clostridium_paradoxum                       Clostridium_paradoxum       0.67
Clostridium_stercorarium                 Clostridium_stercorarium       8.60
Clostridium_termitidis                     Clostridium_termitidis       9.62
                                  kingdom
Bacillus_caldotenax              Bacteria
Butyribacterium_methylotrophicum Bacteria
Clostridium_alkalicellulosi      Bacteria
Clostridium_paradoxum            Bacteria
Clostridium_stercorarium         Bacteria
Clostridium_termitidis           Bacteria
> 
> growth <- lm(doubling_h ~ kingdom, data = doubling)
> summary(growth)

Call:
lm(formula = doubling_h ~ kingdom, data = doubling)

Residuals:
   Min     1Q Median     3Q    Max 
-13.64 -10.87  -8.89  -1.36 421.12 

Coefficients:
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)       13.867      2.071   6.695 3.75e-11 ***
kingdomBacteria   -1.981      2.380  -0.832    0.405    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 31.07 on 926 degrees of freedom
Multiple R-squared:  0.0007477,	Adjusted R-squared:  -0.0003314 
F-statistic: 0.6929 on 1 and 926 DF,  p-value: 0.4054

> 
> ##png("figure5.png", height = 7, width = 7, units = "in", res = 360)
> 
> layout(matrix(c(0, 0, 0, 0,
+                  1, 1, 2, 2,
+                  1, 1, 2, 2,
+                  0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE))
> 
> ## Basic boxplot
> 
> vioplot(log10(doubling_h) ~ kingdom, data = doubling, border = NA, method = "jitter", side = "right", ylab = expression(paste("Doubling")~log[10]~(h)), xlab = "Kingdom", col = "white", las = 1)
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> vioplot(log10(doubling_h) ~ kingdom, data = doubling, border = NA, method = "jitter", side = "right", ylab = "", xlab = "", col = c(alpha("purple", 0.2), alpha("orange", 0.2)), las = 1)
> 
> segments(x0 = 1, y0 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Archaea"]), x1 = 1.4, y1 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Archaea"]), lwd = 2, lty = 2, col = "black")
> text(x = 1.45, y = mean(log10(doubling$doubling_h)[doubling$kingdom == "Archaea"]), expression(mu))
> 
> segments(x0 = 2, y0 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), x1 = 2.39, y1 = mean(log10(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), lwd = 2, lty = 2, col = "black")
> text(x = 2.45, y = mean(log10(doubling$doubling_h)[doubling$kingdom == "Bacteria"]), expression(mu))
> 
> text(x = 0.65, y = 2.5, paste("n =", length(doubling$species), sep = " "), cex = 1.1)
> 
> #mean(doubling$doubling[doubling$kingdom == "Archaea"])
> #mean(doubling$doubling[doubling$kingdom == "Bacteria"])
> 
> stripchart(log10(doubling_h) ~ kingdom, vertical = TRUE, data = doubling, method = "jitter", add = TRUE, pch = 20, col = c(alpha("purple", 0.3), alpha("orange", 0.5)), cex = 1.3)
> 
> mtext("A", side = 2, at = 3, line = 3, las = 1, font = 2)
> 
> 
> ## Basic boxplot
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = expression(paste("Cell size")~log[10]~(mu*m)), xlab = "Kingdom", col = "white", las = 1)
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> vioplot(d1_up ~ kingdom, data = d1_up, border = NA, method = "jitter", side = "right", ylab = "", xlab = "", col = c(alpha("purple", 0.2), alpha("orange", 0.2)), las = 1)
> 
> segments(x0 = 1, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), x1 = 1.311, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), lwd = 2, lty = 2, col = "black")
> text(x = 1.4, y = mean(d1_up$d1_up[d1_up$kingdom == "Archaea"]), expression(mu))
> 
> segments(x0 = 2, y0 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), x1 = 2.4, y1 = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), lwd = 2, lty = 2, col = "black")
> text(x = 2.45, y = mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"]), expression(mu))
> 
> text(x = 0.65, y = 5.3, paste("n =", length(d1_up$species), sep = " "), cex = 1.1)
> 
> #mean(d1_up$d1_up[d1_up$kingdom == "Archaea"])
> #mean(d1_up$d1_up[d1_up$kingdom == "Bacteria"])
> 
> stripchart(d1_up ~ kingdom, vertical = TRUE, data = d1_up, method = "jitter", add = TRUE, pch = 20, col = c(alpha("purple", 0.3), alpha("orange", 0.5)), cex = 1.3)
> 
> mtext("B", side = 2, at = 6, line = 3, las = 1, font = 2)
> 
> d1_up <- aggregate(spp.d1_up$d1_up, by = list(spp.d1_up$species), mean, na.action = na.rm)
> cell.vol <- aggregate(vol$volume, by = list(vol$species), mean)
> 
> #dim(d1_up)
> names(d1_up) <- c("species", "d1_up")
> #dim(cell.vol)
> names(cell.vol) <- c("species", "volume")
> 
> 
> d1_up$species <- gsub("[[:punct:]]", "", d1_up$species)
> d1_up$species <- gsub(" ", "_", d1_up$species)
> cell.vol$species <- gsub(" ", "_", cell.vol$species)
> 
> di.vol <- merge(cell.vol, d1_up, by = "species")
> 
> ##cor(log10(di.vol$volume), di.vol$d1_up, method = c("pearson"))
> p.cor <- cor.test(log10(di.vol$volume), di.vol$d1_up, method = "pearson")
> 
> 
> ##png("figure3.png", height = 7, width = 7, units = "in", res = 360)
> 
> 
> plot(log10(volume) ~ d1_up, data = di.vol, pch = 16, las = 1, ylab = expression(paste("Cell volume ", log[10], sep = " ")(mu*m^3)), xlab = expression(paste("Cell diameter ", log[10], sep = " ")(mu*m)), mgp = c(2.6, 1, 0), type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(volume) ~ d1_up, data = di.vol, pch = 16, las = 1, ylab = "", xlab = "", mgp = c(2.6, 1, 0), type = "p", axes = FALSE)
> 
> 
> abline(lm(log10(di.vol$volume) ~ di.vol$d1_up), lwd = 2)
> legend(x = 0.1, y = 2.3, legend = expression("R"^2==~0.877), bty = "n")
> legend(x = 0.1, y = 2.06, legend = expression(p==~0.001), bty = "n")
> #legend(x = 0.2, y = 2.3, legend = paste("=", round((cor(log(di.vol$volume), di.vol$d1_up, method = "pearson"))^2, 2), sep = " "), bty = "n")
> layout(matrix(c(0, 0, 0, 0,
+                 1, 1, 2, 2,
+                 1, 1, 2, 2,
+                 0, 0, 0, 0), nrow = 4, ncol = 4, byrow = TRUE))
> 
> ## IC
> 
> SSX <- sum(round((log10(vol.dat$volume) - mean(log10(vol.dat$volume)))^2), 2)
> s2 <- var(log10(vol.dat$doubling_h))
> n <- length(vol.dat$doubling_h)
> x <- seq(min(log10(vol.dat$volume)), max(log10(vol.dat$volume)), length = length(vol.dat$species))
> m.x <- mean(round(log(vol.dat$volume), 1))
> se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> is <- qt(0.975, df = n - 2)
> ii <- qt(0.025, df = n - 2)
> ic.s <- se*is
> ic.i <- se*ii
> upper.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.s
Error: object 'pg.mod' not found
> lower.i <- (coef(pg.mod)[1] + coef(pg.mod)[2]*x) + ic.i
Error: object 'pg.mod' not found
> 
> 
> 
> cols <- setNames(c("purple", "orange"), levels(as.factor(vol.dat$kingdom)))
> vol.dat$kingdom <- as.factor(vol.dat$kingdom)
> 
> #plot(log10(doubling_h) ~ log10(volume), data = v.dat, type = "p", pch = 16, las = 1, ylab = expression(paste("Doubling")~log[10]*(h)), xlab = expression(paste("Cell volume")~log[10]*(mu*m^3)), type = "n")
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "n", pch = 21, las = 1, ylab = expression(paste("Doubling ", log[10], sep = " ")*(h)), xlab = expression(paste("Cell volume ", log[10], sep = " ")(mu*m^3)))
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> plot(log10(doubling_h) ~ log10(volume), data = vol.dat, type = "p", pch = 21, col = cols[vol.dat$kingdom], bg = cols[vol.dat$kingdom], las = 1, ylab = "", xlab = "", axes = FALSE)
> 
> lines(x, y = (coef(pg.mod)[1] + coef(pg.mod)[2]*x), lwd = 2)
Error: object 'pg.mod' not found
> polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
Error in xy.coords(x, y, setLab = FALSE) : 'x' and 'y' lengths differ
> 
> #legend("topright", legend = paste("n =", length(vol.dat$species), sep = " "), bty = "n")
> legend("bottomleft", legend = unique(vol.dat$kingdom), pch = 16, col = cols, bg = cols, bty = "n")
> legend(x = -2.6, y = 0, legend = paste(" = ", round(as.data.frame(summary(pg.mod)$tTable)[2, 1], 3)), bty = "n")
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'x' in selecting a method for function 'as.data.frame': error in evaluating the argument 'object' in selecting a method for function 'summary': object 'pg.mod' not found
> legend(x = -2.7, y = 0, legend = expression(beta), bty = "n")
> legend(x = -2.7, y = -0.13, legend = paste("p = ", round(as.data.frame(summary(pg.mod)$tTable)[2, 4], 3)), bty = "n")
Error in h(simpleError(msg, call)) : 
  error in evaluating the argument 'x' in selecting a method for function 'as.data.frame': error in evaluating the argument 'object' in selecting a method for function 'summary': object 'pg.mod' not found
> mtext("A", side = 2, at = 1.6, line = 2.5, las = 1, font = 2)
> 
> mod.fg1 <- lm(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth)
> 
> #mod.fg1.pg <- gls(log10(doubling_h) ~ d1_up, correlation = corBrownian(phy = tree.tmp.op.growth, form = ~species), data = tmp.op.dat.growth, method = "ML")
> 
> ## IC
> 
> #SSX <- sum(round((log10(tmp.op.dat.growth$tmp.op) - mean(log10(tmp.op.dat.growth$tmp.op)))^2), 2)
> #s2 <- var(log10(tmp.op.dat.growth$doubling_h))
> #n <- length(log10(tmp.op.dat.growth$doubling_h))
> #x <- seq(min(log10(tmp.op.dat.growth$tmp.op)), max(log10(tmp.op.dat.growth$tmp.op)), length = 30)
> #m.x <- mean(round(log10(tmp.op.dat.growth$tmp.op), 1))
> #se <- sqrt(s2*((1/n) + (((x - m.x)^2)/SSX)))
> #is <- qt(0.975, df = n - 2)
> #ii <- qt(0.025, df = n - 2)
> #ic.s <- se*is
> #ic.i <- se*ii
> #upper.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.s
> #lower.i <- (coef(model7)[1] + coef(model7)[2]*x) + ic.i
> 
> 
> plot(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth, ylab = expression(paste("Doubling ", log[10], sep = " ")(h)), xlab = expression(paste("Cell diameter")~log[10]~(mu*m)), las = 1, pch = 21, bg = alpha("black", 0.3), cex = 1.2, type = "n")
> 
> grid(nx = NULL, ny = NULL, col = alpha("lightgray", 0.5), lwd = 1, lty = 2)
> 
> par(new = TRUE)
> 
> cols3 <- c("purple", "orange")[as.numeric(as.factor(tmp.op.dat.growth$kingdom))]
> 
> plot(log10(doubling_h) ~ d1_up, data = tmp.op.dat.growth, xlab = "", ylab = "", las = 1, pch = 21, col = cols3, bg = cols3, cex = 1, axes = FALSE)
> 
> #lines(x = x, y = (coef(model7)[1] + coef(model7)[2]*x), lty = 2, lwd = 2, col = "black")
> #polygon(c(rev(x), x), c(rev(lower.i), upper.i), border = FALSE, col = alpha("gold", 0.3))
> 
> legend("bottomleft", legend = levels(as.factor((tmp.op.dat.growth$kingdom))), pch = 16, col = c("purple", "orange"), bg = c("purple", "orange"), bty = "n", cex = 1)
> 
> mtext("B", side = 2, at = 2.35, line = 2.3, las = 1, font = 2)
> 
>   C-c C-c
> 
>